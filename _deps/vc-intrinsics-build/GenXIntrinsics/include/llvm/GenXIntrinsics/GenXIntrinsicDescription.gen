// VisualStudio defines setjmp as _setjmp
#if defined(_MSC_VER) && defined(setjmp) && \
                         !defined(setjmp_undefined_for_msvc)
#  pragma push_macro("setjmp")
#  undef setjmp
#  define setjmp_undefined_for_msvc
#endif

// Target mapping
#ifdef GET_INTRINSIC_TARGET_DATA
struct IntrinsicTargetInfo {
  llvm::StringLiteral Name;
  size_t Offset;
  size_t Count;
};
static constexpr IntrinsicTargetInfo TargetInfos[] = {
  {llvm::StringLiteral(""), 0, 0},
  {llvm::StringLiteral("genx"), 0, 331},
};
#endif

// Enum values for Intrinsics.h
#ifdef GET_INTRINSIC_ENUM_VALUES
  genx_3d_load,                                 // llvm.genx.3d.load
  genx_3d_sample,                               // llvm.genx.3d.sample
  genx_aaaabegin,                               // llvm.genx.aaaabegin
  genx_absf,                                    // llvm.genx.absf
  genx_absi,                                    // llvm.genx.absi
  genx_add_addr,                                // llvm.genx.add.addr
  genx_add3,                                    // llvm.genx.add3
  genx_addc,                                    // llvm.genx.addc
  genx_address_convert,                         // llvm.genx.address.convert
  genx_all,                                     // llvm.genx.all
  genx_alloca,                                  // llvm.genx.alloca
  genx_any,                                     // llvm.genx.any
  genx_avs,                                     // llvm.genx.avs
  genx_barrier,                                 // llvm.genx.barrier
  genx_bfi,                                     // llvm.genx.bfi
  genx_bfn,                                     // llvm.genx.bfn
  genx_bfrev,                                   // llvm.genx.bfrev
  genx_cache_flush,                             // llvm.genx.cache.flush
  genx_cbit,                                    // llvm.genx.cbit
  genx_ce0,                                     // llvm.genx.ce0
  genx_constantf,                               // llvm.genx.constantf
  genx_constanti,                               // llvm.genx.constanti
  genx_constantpred,                            // llvm.genx.constantpred
  genx_convert,                                 // llvm.genx.convert
  genx_convert_addr,                            // llvm.genx.convert.addr
  genx_cos,                                     // llvm.genx.cos
  genx_dp2,                                     // llvm.genx.dp2
  genx_dp3,                                     // llvm.genx.dp3
  genx_dp4,                                     // llvm.genx.dp4
  genx_dpas,                                    // llvm.genx.dpas
  genx_dpas_nosrc0,                             // llvm.genx.dpas.nosrc0
  genx_dpas2,                                   // llvm.genx.dpas2
  genx_dpasw,                                   // llvm.genx.dpasw
  genx_dpasw_nosrc0,                            // llvm.genx.dpasw.nosrc0
  genx_dph,                                     // llvm.genx.dph
  genx_dummy_mov,                               // llvm.genx.dummy.mov
  genx_dword_atomic_add,                        // llvm.genx.dword.atomic.add
  genx_dword_atomic_and,                        // llvm.genx.dword.atomic.and
  genx_dword_atomic_cmpxchg,                    // llvm.genx.dword.atomic.cmpxchg
  genx_dword_atomic_dec,                        // llvm.genx.dword.atomic.dec
  genx_dword_atomic_fcmpwr,                     // llvm.genx.dword.atomic.fcmpwr
  genx_dword_atomic_fmax,                       // llvm.genx.dword.atomic.fmax
  genx_dword_atomic_fmin,                       // llvm.genx.dword.atomic.fmin
  genx_dword_atomic_imax,                       // llvm.genx.dword.atomic.imax
  genx_dword_atomic_imin,                       // llvm.genx.dword.atomic.imin
  genx_dword_atomic_inc,                        // llvm.genx.dword.atomic.inc
  genx_dword_atomic_max,                        // llvm.genx.dword.atomic.max
  genx_dword_atomic_min,                        // llvm.genx.dword.atomic.min
  genx_dword_atomic_or,                         // llvm.genx.dword.atomic.or
  genx_dword_atomic_sub,                        // llvm.genx.dword.atomic.sub
  genx_dword_atomic_xchg,                       // llvm.genx.dword.atomic.xchg
  genx_dword_atomic_xor,                        // llvm.genx.dword.atomic.xor
  genx_dword_atomic2_add,                       // llvm.genx.dword.atomic2.add
  genx_dword_atomic2_and,                       // llvm.genx.dword.atomic2.and
  genx_dword_atomic2_cmpxchg,                   // llvm.genx.dword.atomic2.cmpxchg
  genx_dword_atomic2_dec,                       // llvm.genx.dword.atomic2.dec
  genx_dword_atomic2_fcmpwr,                    // llvm.genx.dword.atomic2.fcmpwr
  genx_dword_atomic2_fmax,                      // llvm.genx.dword.atomic2.fmax
  genx_dword_atomic2_fmin,                      // llvm.genx.dword.atomic2.fmin
  genx_dword_atomic2_imax,                      // llvm.genx.dword.atomic2.imax
  genx_dword_atomic2_imin,                      // llvm.genx.dword.atomic2.imin
  genx_dword_atomic2_inc,                       // llvm.genx.dword.atomic2.inc
  genx_dword_atomic2_max,                       // llvm.genx.dword.atomic2.max
  genx_dword_atomic2_min,                       // llvm.genx.dword.atomic2.min
  genx_dword_atomic2_or,                        // llvm.genx.dword.atomic2.or
  genx_dword_atomic2_sub,                       // llvm.genx.dword.atomic2.sub
  genx_dword_atomic2_xchg,                      // llvm.genx.dword.atomic2.xchg
  genx_dword_atomic2_xor,                       // llvm.genx.dword.atomic2.xor
  genx_exp,                                     // llvm.genx.exp
  genx_faddr,                                   // llvm.genx.faddr
  genx_fbl,                                     // llvm.genx.fbl
  genx_fence,                                   // llvm.genx.fence
  genx_fmax,                                    // llvm.genx.fmax
  genx_fmin,                                    // llvm.genx.fmin
  genx_fptosi_sat,                              // llvm.genx.fptosi.sat
  genx_fptoui_sat,                              // llvm.genx.fptoui.sat
  genx_frc,                                     // llvm.genx.frc
  genx_gaddr,                                   // llvm.genx.gaddr
  genx_gather_masked_scaled2,                   // llvm.genx.gather.masked.scaled2
  genx_gather_private,                          // llvm.genx.gather.private
  genx_gather_scaled,                           // llvm.genx.gather.scaled
  genx_gather_scaled2,                          // llvm.genx.gather.scaled2
  genx_gather4_masked_scaled2,                  // llvm.genx.gather4.masked.scaled2
  genx_gather4_scaled,                          // llvm.genx.gather4.scaled
  genx_gather4_scaled2,                         // llvm.genx.gather4.scaled2
  genx_gather4_typed,                           // llvm.genx.gather4.typed
  genx_get_color,                               // llvm.genx.get.color
  genx_get_hwid,                                // llvm.genx.get.hwid
  genx_get_scoreboard_bti,                      // llvm.genx.get.scoreboard.bti
  genx_get_scoreboard_deltas,                   // llvm.genx.get.scoreboard.deltas
  genx_get_scoreboard_depcnt,                   // llvm.genx.get.scoreboard.depcnt
  genx_group_count,                             // llvm.genx.group.count
  genx_group_id_x,                              // llvm.genx.group.id.x
  genx_group_id_y,                              // llvm.genx.group.id.y
  genx_group_id_z,                              // llvm.genx.group.id.z
  genx_group_or_local_size,                     // llvm.genx.group.or.local.size
  genx_ieee_div,                                // llvm.genx.ieee.div
  genx_ieee_sqrt,                               // llvm.genx.ieee.sqrt
  genx_inv,                                     // llvm.genx.inv
  genx_jump_table,                              // llvm.genx.jump.table
  genx_lane_id,                                 // llvm.genx.lane.id
  genx_line,                                    // llvm.genx.line
  genx_load,                                    // llvm.genx.load
  genx_local_id,                                // llvm.genx.local.id
  genx_local_id_x,                              // llvm.genx.local.id.x
  genx_local_id_y,                              // llvm.genx.local.id.y
  genx_local_id_z,                              // llvm.genx.local.id.z
  genx_local_id16,                              // llvm.genx.local.id16
  genx_local_size,                              // llvm.genx.local.size
  genx_log,                                     // llvm.genx.log
  genx_lrp,                                     // llvm.genx.lrp
  genx_lzd,                                     // llvm.genx.lzd
  genx_media_ld,                                // llvm.genx.media.ld
  genx_media_st,                                // llvm.genx.media.st
  genx_output,                                  // llvm.genx.output
  genx_output_1,                                // llvm.genx.output.1
  genx_oword_ld,                                // llvm.genx.oword.ld
  genx_oword_ld_unaligned,                      // llvm.genx.oword.ld.unaligned
  genx_oword_st,                                // llvm.genx.oword.st
  genx_pln,                                     // llvm.genx.pln
  genx_pow,                                     // llvm.genx.pow
  genx_predefined_surface,                      // llvm.genx.predefined.surface
  genx_print_buffer,                            // llvm.genx.print.buffer
  genx_print_format_index,                      // llvm.genx.print.format.index
  genx_r0,                                      // llvm.genx.r0
  genx_raw_send,                                // llvm.genx.raw.send
  genx_raw_send_noresult,                       // llvm.genx.raw.send.noresult
  genx_raw_send2,                               // llvm.genx.raw.send2
  genx_raw_send2_noresult,                      // llvm.genx.raw.send2.noresult
  genx_raw_sends,                               // llvm.genx.raw.sends
  genx_raw_sends_noresult,                      // llvm.genx.raw.sends.noresult
  genx_raw_sends2,                              // llvm.genx.raw.sends2
  genx_raw_sends2_noresult,                     // llvm.genx.raw.sends2.noresult
  genx_rdpredregion,                            // llvm.genx.rdpredregion
  genx_rdregionf,                               // llvm.genx.rdregionf
  genx_rdregioni,                               // llvm.genx.rdregioni
  genx_read_predef_reg,                         // llvm.genx.read.predef.reg
  genx_rndd,                                    // llvm.genx.rndd
  genx_rnde,                                    // llvm.genx.rnde
  genx_rndu,                                    // llvm.genx.rndu
  genx_rndz,                                    // llvm.genx.rndz
  genx_rol,                                     // llvm.genx.rol
  genx_ror,                                     // llvm.genx.ror
  genx_rsqrt,                                   // llvm.genx.rsqrt
  genx_sample,                                  // llvm.genx.sample
  genx_sample_unorm,                            // llvm.genx.sample.unorm
  genx_sat,                                     // llvm.genx.sat
  genx_sbarrier,                                // llvm.genx.sbarrier
  genx_sbfe,                                    // llvm.genx.sbfe
  genx_scatter_private,                         // llvm.genx.scatter.private
  genx_scatter_scaled,                          // llvm.genx.scatter.scaled
  genx_scatter4_scaled,                         // llvm.genx.scatter4.scaled
  genx_scatter4_typed,                          // llvm.genx.scatter4.typed
  genx_set_pause,                               // llvm.genx.set.pause
  genx_set_sr0_2,                               // llvm.genx.set.sr0.2
  genx_sfbh,                                    // llvm.genx.sfbh
  genx_simdcf_any,                              // llvm.genx.simdcf.any
  genx_simdcf_get_em,                           // llvm.genx.simdcf.get.em
  genx_simdcf_goto,                             // llvm.genx.simdcf.goto
  genx_simdcf_join,                             // llvm.genx.simdcf.join
  genx_simdcf_predicate,                        // llvm.genx.simdcf.predicate
  genx_simdcf_remask,                           // llvm.genx.simdcf.remask
  genx_simdcf_savemask,                         // llvm.genx.simdcf.savemask
  genx_simdcf_unmask,                           // llvm.genx.simdcf.unmask
  genx_sin,                                     // llvm.genx.sin
  genx_smax,                                    // llvm.genx.smax
  genx_smin,                                    // llvm.genx.smin
  genx_smulh,                                   // llvm.genx.smulh
  genx_sqrt,                                    // llvm.genx.sqrt
  genx_sr0,                                     // llvm.genx.sr0
  genx_ssad2,                                   // llvm.genx.ssad2
  genx_ssadd_sat,                               // llvm.genx.ssadd.sat
  genx_ssadd3_sat,                              // llvm.genx.ssadd3.sat
  genx_ssavg,                                   // llvm.genx.ssavg
  genx_ssavg_sat,                               // llvm.genx.ssavg.sat
  genx_ssdp4a,                                  // llvm.genx.ssdp4a
  genx_ssdp4a_sat,                              // llvm.genx.ssdp4a.sat
  genx_ssmad,                                   // llvm.genx.ssmad
  genx_ssmad_sat,                               // llvm.genx.ssmad.sat
  genx_ssmul,                                   // llvm.genx.ssmul
  genx_ssmul_sat,                               // llvm.genx.ssmul.sat
  genx_sssad2add,                               // llvm.genx.sssad2add
  genx_sssad2add_sat,                           // llvm.genx.sssad2add.sat
  genx_ssshl,                                   // llvm.genx.ssshl
  genx_ssshl_sat,                               // llvm.genx.ssshl.sat
  genx_sstrunc_sat,                             // llvm.genx.sstrunc.sat
  genx_suadd_sat,                               // llvm.genx.suadd.sat
  genx_suadd3_sat,                              // llvm.genx.suadd3.sat
  genx_suavg,                                   // llvm.genx.suavg
  genx_suavg_sat,                               // llvm.genx.suavg.sat
  genx_subb,                                    // llvm.genx.subb
  genx_sudp4a,                                  // llvm.genx.sudp4a
  genx_sudp4a_sat,                              // llvm.genx.sudp4a.sat
  genx_sumad,                                   // llvm.genx.sumad
  genx_sumad_sat,                               // llvm.genx.sumad.sat
  genx_sumul,                                   // llvm.genx.sumul
  genx_sumul_sat,                               // llvm.genx.sumul.sat
  genx_susad2add,                               // llvm.genx.susad2add
  genx_susad2add_sat,                           // llvm.genx.susad2add.sat
  genx_sushl,                                   // llvm.genx.sushl
  genx_sushl_sat,                               // llvm.genx.sushl.sat
  genx_sutrunc_sat,                             // llvm.genx.sutrunc.sat
  genx_svm_atomic_add,                          // llvm.genx.svm.atomic.add
  genx_svm_atomic_and,                          // llvm.genx.svm.atomic.and
  genx_svm_atomic_cmpxchg,                      // llvm.genx.svm.atomic.cmpxchg
  genx_svm_atomic_dec,                          // llvm.genx.svm.atomic.dec
  genx_svm_atomic_fcmpwr,                       // llvm.genx.svm.atomic.fcmpwr
  genx_svm_atomic_fmax,                         // llvm.genx.svm.atomic.fmax
  genx_svm_atomic_fmin,                         // llvm.genx.svm.atomic.fmin
  genx_svm_atomic_imax,                         // llvm.genx.svm.atomic.imax
  genx_svm_atomic_imin,                         // llvm.genx.svm.atomic.imin
  genx_svm_atomic_inc,                          // llvm.genx.svm.atomic.inc
  genx_svm_atomic_max,                          // llvm.genx.svm.atomic.max
  genx_svm_atomic_min,                          // llvm.genx.svm.atomic.min
  genx_svm_atomic_or,                           // llvm.genx.svm.atomic.or
  genx_svm_atomic_sub,                          // llvm.genx.svm.atomic.sub
  genx_svm_atomic_xchg,                         // llvm.genx.svm.atomic.xchg
  genx_svm_atomic_xor,                          // llvm.genx.svm.atomic.xor
  genx_svm_block_ld,                            // llvm.genx.svm.block.ld
  genx_svm_block_ld_unaligned,                  // llvm.genx.svm.block.ld.unaligned
  genx_svm_block_st,                            // llvm.genx.svm.block.st
  genx_svm_gather,                              // llvm.genx.svm.gather
  genx_svm_gather4_scaled,                      // llvm.genx.svm.gather4.scaled
  genx_svm_scatter,                             // llvm.genx.svm.scatter
  genx_svm_scatter4_scaled,                     // llvm.genx.svm.scatter4.scaled
  genx_thread_x,                                // llvm.genx.thread.x
  genx_thread_y,                                // llvm.genx.thread.y
  genx_timestamp,                               // llvm.genx.timestamp
  genx_transpose_ld,                            // llvm.genx.transpose.ld
  genx_typed_atomic_add,                        // llvm.genx.typed.atomic.add
  genx_typed_atomic_and,                        // llvm.genx.typed.atomic.and
  genx_typed_atomic_cmpxchg,                    // llvm.genx.typed.atomic.cmpxchg
  genx_typed_atomic_dec,                        // llvm.genx.typed.atomic.dec
  genx_typed_atomic_fcmpwr,                     // llvm.genx.typed.atomic.fcmpwr
  genx_typed_atomic_fmax,                       // llvm.genx.typed.atomic.fmax
  genx_typed_atomic_fmin,                       // llvm.genx.typed.atomic.fmin
  genx_typed_atomic_imax,                       // llvm.genx.typed.atomic.imax
  genx_typed_atomic_imin,                       // llvm.genx.typed.atomic.imin
  genx_typed_atomic_inc,                        // llvm.genx.typed.atomic.inc
  genx_typed_atomic_max,                        // llvm.genx.typed.atomic.max
  genx_typed_atomic_min,                        // llvm.genx.typed.atomic.min
  genx_typed_atomic_or,                         // llvm.genx.typed.atomic.or
  genx_typed_atomic_sub,                        // llvm.genx.typed.atomic.sub
  genx_typed_atomic_xchg,                       // llvm.genx.typed.atomic.xchg
  genx_typed_atomic_xor,                        // llvm.genx.typed.atomic.xor
  genx_ubfe,                                    // llvm.genx.ubfe
  genx_ufbh,                                    // llvm.genx.ufbh
  genx_umax,                                    // llvm.genx.umax
  genx_umin,                                    // llvm.genx.umin
  genx_umulh,                                   // llvm.genx.umulh
  genx_unmask_begin,                            // llvm.genx.unmask.begin
  genx_unmask_end,                              // llvm.genx.unmask.end
  genx_untyped_atomic_add,                      // llvm.genx.untyped.atomic.add
  genx_untyped_atomic_and,                      // llvm.genx.untyped.atomic.and
  genx_untyped_atomic_cmpxchg,                  // llvm.genx.untyped.atomic.cmpxchg
  genx_untyped_atomic_dec,                      // llvm.genx.untyped.atomic.dec
  genx_untyped_atomic_imax,                     // llvm.genx.untyped.atomic.imax
  genx_untyped_atomic_imin,                     // llvm.genx.untyped.atomic.imin
  genx_untyped_atomic_inc,                      // llvm.genx.untyped.atomic.inc
  genx_untyped_atomic_max,                      // llvm.genx.untyped.atomic.max
  genx_untyped_atomic_min,                      // llvm.genx.untyped.atomic.min
  genx_untyped_atomic_or,                       // llvm.genx.untyped.atomic.or
  genx_untyped_atomic_sub,                      // llvm.genx.untyped.atomic.sub
  genx_untyped_atomic_xchg,                     // llvm.genx.untyped.atomic.xchg
  genx_untyped_atomic_xor,                      // llvm.genx.untyped.atomic.xor
  genx_usad2,                                   // llvm.genx.usad2
  genx_usadd_sat,                               // llvm.genx.usadd.sat
  genx_usadd3_sat,                              // llvm.genx.usadd3.sat
  genx_usavg,                                   // llvm.genx.usavg
  genx_usavg_sat,                               // llvm.genx.usavg.sat
  genx_usdp4a,                                  // llvm.genx.usdp4a
  genx_usdp4a_sat,                              // llvm.genx.usdp4a.sat
  genx_usmad,                                   // llvm.genx.usmad
  genx_usmad_sat,                               // llvm.genx.usmad.sat
  genx_usmul,                                   // llvm.genx.usmul
  genx_usmul_sat,                               // llvm.genx.usmul.sat
  genx_ussad2add,                               // llvm.genx.ussad2add
  genx_ussad2add_sat,                           // llvm.genx.ussad2add.sat
  genx_usshl,                                   // llvm.genx.usshl
  genx_usshl_sat,                               // llvm.genx.usshl.sat
  genx_ustrunc_sat,                             // llvm.genx.ustrunc.sat
  genx_uuadd_sat,                               // llvm.genx.uuadd.sat
  genx_uuadd3_sat,                              // llvm.genx.uuadd3.sat
  genx_uuavg,                                   // llvm.genx.uuavg
  genx_uuavg_sat,                               // llvm.genx.uuavg.sat
  genx_uudp4a,                                  // llvm.genx.uudp4a
  genx_uudp4a_sat,                              // llvm.genx.uudp4a.sat
  genx_uumad,                                   // llvm.genx.uumad
  genx_uumad_sat,                               // llvm.genx.uumad.sat
  genx_uumul,                                   // llvm.genx.uumul
  genx_uumul_sat,                               // llvm.genx.uumul.sat
  genx_uusad2add,                               // llvm.genx.uusad2add
  genx_uusad2add_sat,                           // llvm.genx.uusad2add.sat
  genx_uushl,                                   // llvm.genx.uushl
  genx_uushl_sat,                               // llvm.genx.uushl.sat
  genx_uutrunc_sat,                             // llvm.genx.uutrunc.sat
  genx_va_1d_convolve_horizontal,               // llvm.genx.va.1d.convolve.horizontal
  genx_va_1d_convolve_vertical,                 // llvm.genx.va.1d.convolve.vertical
  genx_va_1pixel_convolve,                      // llvm.genx.va.1pixel.convolve
  genx_va_1pixel_convolve_1x1mode,              // llvm.genx.va.1pixel.convolve.1x1mode
  genx_va_bool_centroid,                        // llvm.genx.va.bool.centroid
  genx_va_centroid,                             // llvm.genx.va.centroid
  genx_va_convolve2d,                           // llvm.genx.va.convolve2d
  genx_va_correlation_search,                   // llvm.genx.va.correlation.search
  genx_va_dilate,                               // llvm.genx.va.dilate
  genx_va_erode,                                // llvm.genx.va.erode
  genx_va_flood_fill,                           // llvm.genx.va.flood.fill
  genx_va_hdc_1d_convolve_horizontal,           // llvm.genx.va.hdc.1d.convolve.horizontal
  genx_va_hdc_1d_convolve_vertical,             // llvm.genx.va.hdc.1d.convolve.vertical
  genx_va_hdc_1pixel_convolve,                  // llvm.genx.va.hdc.1pixel.convolve
  genx_va_hdc_convolve2d,                       // llvm.genx.va.hdc.convolve2d
  genx_va_hdc_dilate,                           // llvm.genx.va.hdc.dilate
  genx_va_hdc_erode,                            // llvm.genx.va.hdc.erode
  genx_va_hdc_lbp_correlation,                  // llvm.genx.va.hdc.lbp.correlation
  genx_va_hdc_lbp_creation,                     // llvm.genx.va.hdc.lbp.creation
  genx_va_hdc_minmax_filter,                    // llvm.genx.va.hdc.minmax.filter
  genx_va_lbp_correlation,                      // llvm.genx.va.lbp.correlation
  genx_va_lbp_creation,                         // llvm.genx.va.lbp.creation
  genx_va_minmax,                               // llvm.genx.va.minmax
  genx_va_minmax_filter,                        // llvm.genx.va.minmax.filter
  genx_vload,                                   // llvm.genx.vload
  genx_vstore,                                  // llvm.genx.vstore
  genx_wait,                                    // llvm.genx.wait
  genx_wrconstregion,                           // llvm.genx.wrconstregion
  genx_write_predef_reg,                        // llvm.genx.write.predef.reg
  genx_wrpredpredregion,                        // llvm.genx.wrpredpredregion
  genx_wrpredregion,                            // llvm.genx.wrpredregion
  genx_wrregionf,                               // llvm.genx.wrregionf
  genx_wrregioni,                               // llvm.genx.wrregioni
  genx_yield,                                   // llvm.genx.yield
  genx_zzzzend,                                 // llvm.genx.zzzzend
#endif

// Intrinsic ID to name table
#ifdef GET_INTRINSIC_NAME_TABLE
  MANGLE("llvm.genx.3d.load"),
  MANGLE("llvm.genx.3d.sample"),
  MANGLE("llvm.genx.aaaabegin"),
  MANGLE("llvm.genx.absf"),
  MANGLE("llvm.genx.absi"),
  MANGLE("llvm.genx.add.addr"),
  MANGLE("llvm.genx.add3"),
  MANGLE("llvm.genx.addc"),
  MANGLE("llvm.genx.address.convert"),
  MANGLE("llvm.genx.all"),
  MANGLE("llvm.genx.alloca"),
  MANGLE("llvm.genx.any"),
  MANGLE("llvm.genx.avs"),
  MANGLE("llvm.genx.barrier"),
  MANGLE("llvm.genx.bfi"),
  MANGLE("llvm.genx.bfn"),
  MANGLE("llvm.genx.bfrev"),
  MANGLE("llvm.genx.cache.flush"),
  MANGLE("llvm.genx.cbit"),
  MANGLE("llvm.genx.ce0"),
  MANGLE("llvm.genx.constantf"),
  MANGLE("llvm.genx.constanti"),
  MANGLE("llvm.genx.constantpred"),
  MANGLE("llvm.genx.convert"),
  MANGLE("llvm.genx.convert.addr"),
  MANGLE("llvm.genx.cos"),
  MANGLE("llvm.genx.dp2"),
  MANGLE("llvm.genx.dp3"),
  MANGLE("llvm.genx.dp4"),
  MANGLE("llvm.genx.dpas"),
  MANGLE("llvm.genx.dpas.nosrc0"),
  MANGLE("llvm.genx.dpas2"),
  MANGLE("llvm.genx.dpasw"),
  MANGLE("llvm.genx.dpasw.nosrc0"),
  MANGLE("llvm.genx.dph"),
  MANGLE("llvm.genx.dummy.mov"),
  MANGLE("llvm.genx.dword.atomic.add"),
  MANGLE("llvm.genx.dword.atomic.and"),
  MANGLE("llvm.genx.dword.atomic.cmpxchg"),
  MANGLE("llvm.genx.dword.atomic.dec"),
  MANGLE("llvm.genx.dword.atomic.fcmpwr"),
  MANGLE("llvm.genx.dword.atomic.fmax"),
  MANGLE("llvm.genx.dword.atomic.fmin"),
  MANGLE("llvm.genx.dword.atomic.imax"),
  MANGLE("llvm.genx.dword.atomic.imin"),
  MANGLE("llvm.genx.dword.atomic.inc"),
  MANGLE("llvm.genx.dword.atomic.max"),
  MANGLE("llvm.genx.dword.atomic.min"),
  MANGLE("llvm.genx.dword.atomic.or"),
  MANGLE("llvm.genx.dword.atomic.sub"),
  MANGLE("llvm.genx.dword.atomic.xchg"),
  MANGLE("llvm.genx.dword.atomic.xor"),
  MANGLE("llvm.genx.dword.atomic2.add"),
  MANGLE("llvm.genx.dword.atomic2.and"),
  MANGLE("llvm.genx.dword.atomic2.cmpxchg"),
  MANGLE("llvm.genx.dword.atomic2.dec"),
  MANGLE("llvm.genx.dword.atomic2.fcmpwr"),
  MANGLE("llvm.genx.dword.atomic2.fmax"),
  MANGLE("llvm.genx.dword.atomic2.fmin"),
  MANGLE("llvm.genx.dword.atomic2.imax"),
  MANGLE("llvm.genx.dword.atomic2.imin"),
  MANGLE("llvm.genx.dword.atomic2.inc"),
  MANGLE("llvm.genx.dword.atomic2.max"),
  MANGLE("llvm.genx.dword.atomic2.min"),
  MANGLE("llvm.genx.dword.atomic2.or"),
  MANGLE("llvm.genx.dword.atomic2.sub"),
  MANGLE("llvm.genx.dword.atomic2.xchg"),
  MANGLE("llvm.genx.dword.atomic2.xor"),
  MANGLE("llvm.genx.exp"),
  MANGLE("llvm.genx.faddr"),
  MANGLE("llvm.genx.fbl"),
  MANGLE("llvm.genx.fence"),
  MANGLE("llvm.genx.fmax"),
  MANGLE("llvm.genx.fmin"),
  MANGLE("llvm.genx.fptosi.sat"),
  MANGLE("llvm.genx.fptoui.sat"),
  MANGLE("llvm.genx.frc"),
  MANGLE("llvm.genx.gaddr"),
  MANGLE("llvm.genx.gather.masked.scaled2"),
  MANGLE("llvm.genx.gather.private"),
  MANGLE("llvm.genx.gather.scaled"),
  MANGLE("llvm.genx.gather.scaled2"),
  MANGLE("llvm.genx.gather4.masked.scaled2"),
  MANGLE("llvm.genx.gather4.scaled"),
  MANGLE("llvm.genx.gather4.scaled2"),
  MANGLE("llvm.genx.gather4.typed"),
  MANGLE("llvm.genx.get.color"),
  MANGLE("llvm.genx.get.hwid"),
  MANGLE("llvm.genx.get.scoreboard.bti"),
  MANGLE("llvm.genx.get.scoreboard.deltas"),
  MANGLE("llvm.genx.get.scoreboard.depcnt"),
  MANGLE("llvm.genx.group.count"),
  MANGLE("llvm.genx.group.id.x"),
  MANGLE("llvm.genx.group.id.y"),
  MANGLE("llvm.genx.group.id.z"),
  MANGLE("llvm.genx.group.or.local.size"),
  MANGLE("llvm.genx.ieee.div"),
  MANGLE("llvm.genx.ieee.sqrt"),
  MANGLE("llvm.genx.inv"),
  MANGLE("llvm.genx.jump.table"),
  MANGLE("llvm.genx.lane.id"),
  MANGLE("llvm.genx.line"),
  MANGLE("llvm.genx.load"),
  MANGLE("llvm.genx.local.id"),
  MANGLE("llvm.genx.local.id.x"),
  MANGLE("llvm.genx.local.id.y"),
  MANGLE("llvm.genx.local.id.z"),
  MANGLE("llvm.genx.local.id16"),
  MANGLE("llvm.genx.local.size"),
  MANGLE("llvm.genx.log"),
  MANGLE("llvm.genx.lrp"),
  MANGLE("llvm.genx.lzd"),
  MANGLE("llvm.genx.media.ld"),
  MANGLE("llvm.genx.media.st"),
  MANGLE("llvm.genx.output"),
  MANGLE("llvm.genx.output.1"),
  MANGLE("llvm.genx.oword.ld"),
  MANGLE("llvm.genx.oword.ld.unaligned"),
  MANGLE("llvm.genx.oword.st"),
  MANGLE("llvm.genx.pln"),
  MANGLE("llvm.genx.pow"),
  MANGLE("llvm.genx.predefined.surface"),
  MANGLE("llvm.genx.print.buffer"),
  MANGLE("llvm.genx.print.format.index"),
  MANGLE("llvm.genx.r0"),
  MANGLE("llvm.genx.raw.send"),
  MANGLE("llvm.genx.raw.send.noresult"),
  MANGLE("llvm.genx.raw.send2"),
  MANGLE("llvm.genx.raw.send2.noresult"),
  MANGLE("llvm.genx.raw.sends"),
  MANGLE("llvm.genx.raw.sends.noresult"),
  MANGLE("llvm.genx.raw.sends2"),
  MANGLE("llvm.genx.raw.sends2.noresult"),
  MANGLE("llvm.genx.rdpredregion"),
  MANGLE("llvm.genx.rdregionf"),
  MANGLE("llvm.genx.rdregioni"),
  MANGLE("llvm.genx.read.predef.reg"),
  MANGLE("llvm.genx.rndd"),
  MANGLE("llvm.genx.rnde"),
  MANGLE("llvm.genx.rndu"),
  MANGLE("llvm.genx.rndz"),
  MANGLE("llvm.genx.rol"),
  MANGLE("llvm.genx.ror"),
  MANGLE("llvm.genx.rsqrt"),
  MANGLE("llvm.genx.sample"),
  MANGLE("llvm.genx.sample.unorm"),
  MANGLE("llvm.genx.sat"),
  MANGLE("llvm.genx.sbarrier"),
  MANGLE("llvm.genx.sbfe"),
  MANGLE("llvm.genx.scatter.private"),
  MANGLE("llvm.genx.scatter.scaled"),
  MANGLE("llvm.genx.scatter4.scaled"),
  MANGLE("llvm.genx.scatter4.typed"),
  MANGLE("llvm.genx.set.pause"),
  MANGLE("llvm.genx.set.sr0.2"),
  MANGLE("llvm.genx.sfbh"),
  MANGLE("llvm.genx.simdcf.any"),
  MANGLE("llvm.genx.simdcf.get.em"),
  MANGLE("llvm.genx.simdcf.goto"),
  MANGLE("llvm.genx.simdcf.join"),
  MANGLE("llvm.genx.simdcf.predicate"),
  MANGLE("llvm.genx.simdcf.remask"),
  MANGLE("llvm.genx.simdcf.savemask"),
  MANGLE("llvm.genx.simdcf.unmask"),
  MANGLE("llvm.genx.sin"),
  MANGLE("llvm.genx.smax"),
  MANGLE("llvm.genx.smin"),
  MANGLE("llvm.genx.smulh"),
  MANGLE("llvm.genx.sqrt"),
  MANGLE("llvm.genx.sr0"),
  MANGLE("llvm.genx.ssad2"),
  MANGLE("llvm.genx.ssadd.sat"),
  MANGLE("llvm.genx.ssadd3.sat"),
  MANGLE("llvm.genx.ssavg"),
  MANGLE("llvm.genx.ssavg.sat"),
  MANGLE("llvm.genx.ssdp4a"),
  MANGLE("llvm.genx.ssdp4a.sat"),
  MANGLE("llvm.genx.ssmad"),
  MANGLE("llvm.genx.ssmad.sat"),
  MANGLE("llvm.genx.ssmul"),
  MANGLE("llvm.genx.ssmul.sat"),
  MANGLE("llvm.genx.sssad2add"),
  MANGLE("llvm.genx.sssad2add.sat"),
  MANGLE("llvm.genx.ssshl"),
  MANGLE("llvm.genx.ssshl.sat"),
  MANGLE("llvm.genx.sstrunc.sat"),
  MANGLE("llvm.genx.suadd.sat"),
  MANGLE("llvm.genx.suadd3.sat"),
  MANGLE("llvm.genx.suavg"),
  MANGLE("llvm.genx.suavg.sat"),
  MANGLE("llvm.genx.subb"),
  MANGLE("llvm.genx.sudp4a"),
  MANGLE("llvm.genx.sudp4a.sat"),
  MANGLE("llvm.genx.sumad"),
  MANGLE("llvm.genx.sumad.sat"),
  MANGLE("llvm.genx.sumul"),
  MANGLE("llvm.genx.sumul.sat"),
  MANGLE("llvm.genx.susad2add"),
  MANGLE("llvm.genx.susad2add.sat"),
  MANGLE("llvm.genx.sushl"),
  MANGLE("llvm.genx.sushl.sat"),
  MANGLE("llvm.genx.sutrunc.sat"),
  MANGLE("llvm.genx.svm.atomic.add"),
  MANGLE("llvm.genx.svm.atomic.and"),
  MANGLE("llvm.genx.svm.atomic.cmpxchg"),
  MANGLE("llvm.genx.svm.atomic.dec"),
  MANGLE("llvm.genx.svm.atomic.fcmpwr"),
  MANGLE("llvm.genx.svm.atomic.fmax"),
  MANGLE("llvm.genx.svm.atomic.fmin"),
  MANGLE("llvm.genx.svm.atomic.imax"),
  MANGLE("llvm.genx.svm.atomic.imin"),
  MANGLE("llvm.genx.svm.atomic.inc"),
  MANGLE("llvm.genx.svm.atomic.max"),
  MANGLE("llvm.genx.svm.atomic.min"),
  MANGLE("llvm.genx.svm.atomic.or"),
  MANGLE("llvm.genx.svm.atomic.sub"),
  MANGLE("llvm.genx.svm.atomic.xchg"),
  MANGLE("llvm.genx.svm.atomic.xor"),
  MANGLE("llvm.genx.svm.block.ld"),
  MANGLE("llvm.genx.svm.block.ld.unaligned"),
  MANGLE("llvm.genx.svm.block.st"),
  MANGLE("llvm.genx.svm.gather"),
  MANGLE("llvm.genx.svm.gather4.scaled"),
  MANGLE("llvm.genx.svm.scatter"),
  MANGLE("llvm.genx.svm.scatter4.scaled"),
  MANGLE("llvm.genx.thread.x"),
  MANGLE("llvm.genx.thread.y"),
  MANGLE("llvm.genx.timestamp"),
  MANGLE("llvm.genx.transpose.ld"),
  MANGLE("llvm.genx.typed.atomic.add"),
  MANGLE("llvm.genx.typed.atomic.and"),
  MANGLE("llvm.genx.typed.atomic.cmpxchg"),
  MANGLE("llvm.genx.typed.atomic.dec"),
  MANGLE("llvm.genx.typed.atomic.fcmpwr"),
  MANGLE("llvm.genx.typed.atomic.fmax"),
  MANGLE("llvm.genx.typed.atomic.fmin"),
  MANGLE("llvm.genx.typed.atomic.imax"),
  MANGLE("llvm.genx.typed.atomic.imin"),
  MANGLE("llvm.genx.typed.atomic.inc"),
  MANGLE("llvm.genx.typed.atomic.max"),
  MANGLE("llvm.genx.typed.atomic.min"),
  MANGLE("llvm.genx.typed.atomic.or"),
  MANGLE("llvm.genx.typed.atomic.sub"),
  MANGLE("llvm.genx.typed.atomic.xchg"),
  MANGLE("llvm.genx.typed.atomic.xor"),
  MANGLE("llvm.genx.ubfe"),
  MANGLE("llvm.genx.ufbh"),
  MANGLE("llvm.genx.umax"),
  MANGLE("llvm.genx.umin"),
  MANGLE("llvm.genx.umulh"),
  MANGLE("llvm.genx.unmask.begin"),
  MANGLE("llvm.genx.unmask.end"),
  MANGLE("llvm.genx.untyped.atomic.add"),
  MANGLE("llvm.genx.untyped.atomic.and"),
  MANGLE("llvm.genx.untyped.atomic.cmpxchg"),
  MANGLE("llvm.genx.untyped.atomic.dec"),
  MANGLE("llvm.genx.untyped.atomic.imax"),
  MANGLE("llvm.genx.untyped.atomic.imin"),
  MANGLE("llvm.genx.untyped.atomic.inc"),
  MANGLE("llvm.genx.untyped.atomic.max"),
  MANGLE("llvm.genx.untyped.atomic.min"),
  MANGLE("llvm.genx.untyped.atomic.or"),
  MANGLE("llvm.genx.untyped.atomic.sub"),
  MANGLE("llvm.genx.untyped.atomic.xchg"),
  MANGLE("llvm.genx.untyped.atomic.xor"),
  MANGLE("llvm.genx.usad2"),
  MANGLE("llvm.genx.usadd.sat"),
  MANGLE("llvm.genx.usadd3.sat"),
  MANGLE("llvm.genx.usavg"),
  MANGLE("llvm.genx.usavg.sat"),
  MANGLE("llvm.genx.usdp4a"),
  MANGLE("llvm.genx.usdp4a.sat"),
  MANGLE("llvm.genx.usmad"),
  MANGLE("llvm.genx.usmad.sat"),
  MANGLE("llvm.genx.usmul"),
  MANGLE("llvm.genx.usmul.sat"),
  MANGLE("llvm.genx.ussad2add"),
  MANGLE("llvm.genx.ussad2add.sat"),
  MANGLE("llvm.genx.usshl"),
  MANGLE("llvm.genx.usshl.sat"),
  MANGLE("llvm.genx.ustrunc.sat"),
  MANGLE("llvm.genx.uuadd.sat"),
  MANGLE("llvm.genx.uuadd3.sat"),
  MANGLE("llvm.genx.uuavg"),
  MANGLE("llvm.genx.uuavg.sat"),
  MANGLE("llvm.genx.uudp4a"),
  MANGLE("llvm.genx.uudp4a.sat"),
  MANGLE("llvm.genx.uumad"),
  MANGLE("llvm.genx.uumad.sat"),
  MANGLE("llvm.genx.uumul"),
  MANGLE("llvm.genx.uumul.sat"),
  MANGLE("llvm.genx.uusad2add"),
  MANGLE("llvm.genx.uusad2add.sat"),
  MANGLE("llvm.genx.uushl"),
  MANGLE("llvm.genx.uushl.sat"),
  MANGLE("llvm.genx.uutrunc.sat"),
  MANGLE("llvm.genx.va.1d.convolve.horizontal"),
  MANGLE("llvm.genx.va.1d.convolve.vertical"),
  MANGLE("llvm.genx.va.1pixel.convolve"),
  MANGLE("llvm.genx.va.1pixel.convolve.1x1mode"),
  MANGLE("llvm.genx.va.bool.centroid"),
  MANGLE("llvm.genx.va.centroid"),
  MANGLE("llvm.genx.va.convolve2d"),
  MANGLE("llvm.genx.va.correlation.search"),
  MANGLE("llvm.genx.va.dilate"),
  MANGLE("llvm.genx.va.erode"),
  MANGLE("llvm.genx.va.flood.fill"),
  MANGLE("llvm.genx.va.hdc.1d.convolve.horizontal"),
  MANGLE("llvm.genx.va.hdc.1d.convolve.vertical"),
  MANGLE("llvm.genx.va.hdc.1pixel.convolve"),
  MANGLE("llvm.genx.va.hdc.convolve2d"),
  MANGLE("llvm.genx.va.hdc.dilate"),
  MANGLE("llvm.genx.va.hdc.erode"),
  MANGLE("llvm.genx.va.hdc.lbp.correlation"),
  MANGLE("llvm.genx.va.hdc.lbp.creation"),
  MANGLE("llvm.genx.va.hdc.minmax.filter"),
  MANGLE("llvm.genx.va.lbp.correlation"),
  MANGLE("llvm.genx.va.lbp.creation"),
  MANGLE("llvm.genx.va.minmax"),
  MANGLE("llvm.genx.va.minmax.filter"),
  MANGLE("llvm.genx.vload"),
  MANGLE("llvm.genx.vstore"),
  MANGLE("llvm.genx.wait"),
  MANGLE("llvm.genx.wrconstregion"),
  MANGLE("llvm.genx.write.predef.reg"),
  MANGLE("llvm.genx.wrpredpredregion"),
  MANGLE("llvm.genx.wrpredregion"),
  MANGLE("llvm.genx.wrregionf"),
  MANGLE("llvm.genx.wrregioni"),
  MANGLE("llvm.genx.yield"),
  MANGLE("llvm.genx.zzzzend"),
#endif

// Intrinsic ID to overload bitset
#ifdef GET_INTRINSIC_OVERLOAD_TABLE
static const uint8_t OTable[] = {
  0 | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<3) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6),
  0 | (1U<<4),
  0 | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<3) | (1U<<6),
  0 | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<2) | (1U<<4) | (1U<<5) | (1U<<6) | (1U<<7),
  0 | (1U<<0) | (1U<<1) | (1U<<3)
};

assert( ((id / 8) < (sizeof(OTable) / sizeof(OTable[0]))) && "Overload Table index overflow");
return (OTable[id/8] & (1 << (id%8))) != 0;
#endif

// Is arg overloaded
#ifdef GET_INTRINSIC_OVERLOAD_ARGS_TABLE
switch(IntrinID) {
default: llvm_unreachable("Unknown intrinsic ID");
case GenXIntrinsic::genx_3d_load: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 6: return true;
   case 7: return true;
   case 8: return true;
   case 9: return true;
   case 10: return true;
   case 11: return true;
   case 12: return true;
   case 13: return true;
   case 14: return true;
   case 15: return true;
   case 16: return true;
   case 17: return true;
   case 18: return true;
   case 19: return true;
   }
}
case GenXIntrinsic::genx_3d_sample: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 6: return true;
   case 7: return true;
   case 8: return true;
   case 9: return true;
   case 10: return true;
   case 11: return true;
   case 12: return true;
   case 13: return true;
   case 14: return true;
   case 15: return true;
   case 16: return true;
   case 17: return true;
   case 18: return true;
   case 19: return true;
   case 20: return true;
   }
}
case GenXIntrinsic::genx_aaaabegin: 
   return false;
case GenXIntrinsic::genx_absf: 
   return false;
case GenXIntrinsic::genx_absi: 
   return false;
case GenXIntrinsic::genx_add_addr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_add3: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_addc: 
   return false;
case GenXIntrinsic::genx_address_convert: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_all: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_alloca: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_any: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_avs: 
   return false;
case GenXIntrinsic::genx_barrier: 
   return false;
case GenXIntrinsic::genx_bfi: 
   return false;
case GenXIntrinsic::genx_bfn: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_bfrev: 
   return false;
case GenXIntrinsic::genx_cache_flush: 
   return false;
case GenXIntrinsic::genx_cbit: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ce0: 
   return false;
case GenXIntrinsic::genx_constantf: 
   return false;
case GenXIntrinsic::genx_constanti: 
   return false;
case GenXIntrinsic::genx_constantpred: 
   return false;
case GenXIntrinsic::genx_convert: 
   return false;
case GenXIntrinsic::genx_convert_addr: 
   return false;
case GenXIntrinsic::genx_cos: 
   return false;
case GenXIntrinsic::genx_dp2: 
   return false;
case GenXIntrinsic::genx_dp3: 
   return false;
case GenXIntrinsic::genx_dp4: 
   return false;
case GenXIntrinsic::genx_dpas: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dpas_nosrc0: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_dpas2: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dpasw: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dpasw_nosrc0: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_dph: 
   return false;
case GenXIntrinsic::genx_dummy_mov: 
   return false;
case GenXIntrinsic::genx_dword_atomic_add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_and: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_cmpxchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_dec: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_fcmpwr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_fmax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_fmin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_imax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_imin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_inc: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_max: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_min: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_or: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_sub: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_xchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic_xor: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_and: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_cmpxchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_dec: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_fcmpwr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_fmax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_fmin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_imax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_imin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_inc: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_max: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_min: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_or: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_sub: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_xchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_dword_atomic2_xor: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_exp: 
   return false;
case GenXIntrinsic::genx_faddr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_fbl: 
   return false;
case GenXIntrinsic::genx_fence: 
   return false;
case GenXIntrinsic::genx_fmax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_fmin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_fptosi_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_fptoui_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_frc: 
   return false;
case GenXIntrinsic::genx_gaddr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_gather_masked_scaled2: {
    switch(ArgNum) {
   default: return false;
   case 4: return true;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_gather_private: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_gather_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_gather_scaled2: {
    switch(ArgNum) {
   default: return false;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_gather4_masked_scaled2: {
    switch(ArgNum) {
   default: return false;
   case 4: return true;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_gather4_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_gather4_scaled2: {
    switch(ArgNum) {
   default: return false;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_gather4_typed: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_get_color: 
   return false;
case GenXIntrinsic::genx_get_hwid: 
   return false;
case GenXIntrinsic::genx_get_scoreboard_bti: 
   return false;
case GenXIntrinsic::genx_get_scoreboard_deltas: 
   return false;
case GenXIntrinsic::genx_get_scoreboard_depcnt: 
   return false;
case GenXIntrinsic::genx_group_count: 
   return false;
case GenXIntrinsic::genx_group_id_x: 
   return false;
case GenXIntrinsic::genx_group_id_y: 
   return false;
case GenXIntrinsic::genx_group_id_z: 
   return false;
case GenXIntrinsic::genx_group_or_local_size: 
   return false;
case GenXIntrinsic::genx_ieee_div: 
   return false;
case GenXIntrinsic::genx_ieee_sqrt: 
   return false;
case GenXIntrinsic::genx_inv: 
   return false;
case GenXIntrinsic::genx_jump_table: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_lane_id: 
   return false;
case GenXIntrinsic::genx_line: 
   return false;
case GenXIntrinsic::genx_load: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_local_id: 
   return false;
case GenXIntrinsic::genx_local_id_x: 
   return false;
case GenXIntrinsic::genx_local_id_y: 
   return false;
case GenXIntrinsic::genx_local_id_z: 
   return false;
case GenXIntrinsic::genx_local_id16: 
   return false;
case GenXIntrinsic::genx_local_size: 
   return false;
case GenXIntrinsic::genx_log: 
   return false;
case GenXIntrinsic::genx_lrp: 
   return false;
case GenXIntrinsic::genx_lzd: 
   return false;
case GenXIntrinsic::genx_media_ld: 
   return false;
case GenXIntrinsic::genx_media_st: {
    switch(ArgNum) {
   default: return false;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_output: 
   return false;
case GenXIntrinsic::genx_output_1: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_oword_ld: 
   return false;
case GenXIntrinsic::genx_oword_ld_unaligned: 
   return false;
case GenXIntrinsic::genx_oword_st: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_pln: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_pow: 
   return false;
case GenXIntrinsic::genx_predefined_surface: 
   return false;
case GenXIntrinsic::genx_print_buffer: 
   return false;
case GenXIntrinsic::genx_print_format_index: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_r0: 
   return false;
case GenXIntrinsic::genx_raw_send: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_raw_send_noresult: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_raw_send2: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   case 8: return true;
   }
}
case GenXIntrinsic::genx_raw_send2_noresult: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   case 7: return true;
   }
}
case GenXIntrinsic::genx_raw_sends: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_raw_sends_noresult: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_raw_sends2: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   case 9: return true;
   case 10: return true;
   }
}
case GenXIntrinsic::genx_raw_sends2_noresult: {
    switch(ArgNum) {
   default: return false;
   case 2: return true;
   case 8: return true;
   case 9: return true;
   }
}
case GenXIntrinsic::genx_rdpredregion: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_rdregionf: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_rdregioni: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_read_predef_reg: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_rndd: 
   return false;
case GenXIntrinsic::genx_rnde: 
   return false;
case GenXIntrinsic::genx_rndu: 
   return false;
case GenXIntrinsic::genx_rndz: 
   return false;
case GenXIntrinsic::genx_rol: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ror: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_rsqrt: 
   return false;
case GenXIntrinsic::genx_sample: {
    switch(ArgNum) {
   default: return false;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_sample_unorm: 
   return false;
case GenXIntrinsic::genx_sat: 
   return false;
case GenXIntrinsic::genx_sbarrier: 
   return false;
case GenXIntrinsic::genx_sbfe: 
   return false;
case GenXIntrinsic::genx_scatter_private: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_scatter_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 5: return true;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_scatter4_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 5: return true;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_scatter4_typed: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 3: return true;
   case 6: return true;
   }
}
case GenXIntrinsic::genx_set_pause: 
   return false;
case GenXIntrinsic::genx_set_sr0_2: 
   return false;
case GenXIntrinsic::genx_sfbh: 
   return false;
case GenXIntrinsic::genx_simdcf_any: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_simdcf_get_em: 
   return false;
case GenXIntrinsic::genx_simdcf_goto: 
   return false;
case GenXIntrinsic::genx_simdcf_join: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_simdcf_predicate: 
   return false;
case GenXIntrinsic::genx_simdcf_remask: 
   return false;
case GenXIntrinsic::genx_simdcf_savemask: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_simdcf_unmask: 
   return false;
case GenXIntrinsic::genx_sin: 
   return false;
case GenXIntrinsic::genx_smax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_smin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_smulh: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sqrt: 
   return false;
case GenXIntrinsic::genx_sr0: 
   return false;
case GenXIntrinsic::genx_ssad2: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssadd_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssadd3_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssavg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssavg_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssdp4a: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_ssdp4a_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_ssmad: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssmad_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssmul: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssmul_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sssad2add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sssad2add_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssshl: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ssshl_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sstrunc_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_suadd_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_suadd3_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_suavg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_suavg_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_subb: 
   return false;
case GenXIntrinsic::genx_sudp4a: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_sudp4a_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_sumad: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sumad_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sumul: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sumul_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_susad2add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_susad2add_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sushl: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sushl_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_sutrunc_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_and: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_cmpxchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_dec: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_fcmpwr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_fmax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_fmin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_imax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_imin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_inc: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_max: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_min: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_or: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_sub: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_xchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_atomic_xor: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_block_ld: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_svm_block_ld_unaligned: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_svm_block_st: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_svm_gather: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_svm_gather4_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_svm_scatter: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_svm_scatter4_scaled: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_thread_x: 
   return false;
case GenXIntrinsic::genx_thread_y: 
   return false;
case GenXIntrinsic::genx_timestamp: 
   return false;
case GenXIntrinsic::genx_transpose_ld: 
   return false;
case GenXIntrinsic::genx_typed_atomic_add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_and: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_cmpxchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_dec: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_fcmpwr: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 4: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_fmax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_fmin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_imax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_imin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_inc: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_max: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_min: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_or: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_sub: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_xchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_typed_atomic_xor: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 3: return true;
   }
}
case GenXIntrinsic::genx_ubfe: 
   return false;
case GenXIntrinsic::genx_ufbh: 
   return false;
case GenXIntrinsic::genx_umax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_umin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_umulh: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_unmask_begin: 
   return false;
case GenXIntrinsic::genx_unmask_end: 
   return false;
case GenXIntrinsic::genx_untyped_atomic_add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_and: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_cmpxchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_dec: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_imax: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_imin: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_inc: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_max: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_min: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_or: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_sub: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_xchg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_untyped_atomic_xor: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usad2: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usadd_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usadd3_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usavg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usavg_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usdp4a: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_usdp4a_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_usmad: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usmad_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usmul: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usmul_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ussad2add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ussad2add_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usshl: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_usshl_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_ustrunc_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uuadd_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uuadd3_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uuavg: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uuavg_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uudp4a: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_uudp4a_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   case 2: return true;
   }
}
case GenXIntrinsic::genx_uumad: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uumad_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uumul: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uumul_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uusad2add: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uusad2add_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uushl: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uushl_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_uutrunc_sat: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_va_1d_convolve_horizontal: 
   return false;
case GenXIntrinsic::genx_va_1d_convolve_vertical: 
   return false;
case GenXIntrinsic::genx_va_1pixel_convolve: {
    switch(ArgNum) {
   default: return false;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_va_1pixel_convolve_1x1mode: 
   return false;
case GenXIntrinsic::genx_va_bool_centroid: 
   return false;
case GenXIntrinsic::genx_va_centroid: 
   return false;
case GenXIntrinsic::genx_va_convolve2d: 
   return false;
case GenXIntrinsic::genx_va_correlation_search: 
   return false;
case GenXIntrinsic::genx_va_dilate: 
   return false;
case GenXIntrinsic::genx_va_erode: 
   return false;
case GenXIntrinsic::genx_va_flood_fill: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_va_hdc_1d_convolve_horizontal: 
   return false;
case GenXIntrinsic::genx_va_hdc_1d_convolve_vertical: 
   return false;
case GenXIntrinsic::genx_va_hdc_1pixel_convolve: {
    switch(ArgNum) {
   default: return false;
   case 5: return true;
   }
}
case GenXIntrinsic::genx_va_hdc_convolve2d: 
   return false;
case GenXIntrinsic::genx_va_hdc_dilate: 
   return false;
case GenXIntrinsic::genx_va_hdc_erode: 
   return false;
case GenXIntrinsic::genx_va_hdc_lbp_correlation: 
   return false;
case GenXIntrinsic::genx_va_hdc_lbp_creation: 
   return false;
case GenXIntrinsic::genx_va_hdc_minmax_filter: 
   return false;
case GenXIntrinsic::genx_va_lbp_correlation: 
   return false;
case GenXIntrinsic::genx_va_lbp_creation: 
   return false;
case GenXIntrinsic::genx_va_minmax: 
   return false;
case GenXIntrinsic::genx_va_minmax_filter: 
   return false;
case GenXIntrinsic::genx_vload: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   }
}
case GenXIntrinsic::genx_vstore: {
    switch(ArgNum) {
   default: return false;
   case 0: return true;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_wait: 
   return false;
case GenXIntrinsic::genx_wrconstregion: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 7: return true;
   }
}
case GenXIntrinsic::genx_write_predef_reg: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_wrpredpredregion: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_wrpredregion: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   }
}
case GenXIntrinsic::genx_wrregionf: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 7: return true;
   }
}
case GenXIntrinsic::genx_wrregioni: {
    switch(ArgNum) {
   default: return false;
   case 1: return true;
   case 5: return true;
   case 7: return true;
   }
}
case GenXIntrinsic::genx_yield: 
   return false;
case GenXIntrinsic::genx_zzzzend: 
   return false;
case Intrinsic::fma:
   return false;
}
#endif

// Is ret overloaded
#ifdef GET_INTRINSIC_OVERLOAD_RET_TABLE
switch(IntrinID) {
default:
  return false;
case GenXIntrinsic::genx_3d_load:
case GenXIntrinsic::genx_3d_sample:
case GenXIntrinsic::genx_aaaabegin:
case GenXIntrinsic::genx_absf:
case GenXIntrinsic::genx_absi:
case GenXIntrinsic::genx_add_addr:
case GenXIntrinsic::genx_add3:
case GenXIntrinsic::genx_addc:
case GenXIntrinsic::genx_address_convert:
case GenXIntrinsic::genx_alloca:
case GenXIntrinsic::genx_avs:
case GenXIntrinsic::genx_bfi:
case GenXIntrinsic::genx_bfn:
case GenXIntrinsic::genx_bfrev:
case GenXIntrinsic::genx_cbit:
case GenXIntrinsic::genx_constantf:
case GenXIntrinsic::genx_constanti:
case GenXIntrinsic::genx_constantpred:
case GenXIntrinsic::genx_convert:
case GenXIntrinsic::genx_convert_addr:
case GenXIntrinsic::genx_cos:
case GenXIntrinsic::genx_dp2:
case GenXIntrinsic::genx_dp3:
case GenXIntrinsic::genx_dp4:
case GenXIntrinsic::genx_dpas:
case GenXIntrinsic::genx_dpas_nosrc0:
case GenXIntrinsic::genx_dpas2:
case GenXIntrinsic::genx_dpasw:
case GenXIntrinsic::genx_dpasw_nosrc0:
case GenXIntrinsic::genx_dph:
case GenXIntrinsic::genx_dword_atomic_add:
case GenXIntrinsic::genx_dword_atomic_and:
case GenXIntrinsic::genx_dword_atomic_cmpxchg:
case GenXIntrinsic::genx_dword_atomic_dec:
case GenXIntrinsic::genx_dword_atomic_fcmpwr:
case GenXIntrinsic::genx_dword_atomic_fmax:
case GenXIntrinsic::genx_dword_atomic_fmin:
case GenXIntrinsic::genx_dword_atomic_imax:
case GenXIntrinsic::genx_dword_atomic_imin:
case GenXIntrinsic::genx_dword_atomic_inc:
case GenXIntrinsic::genx_dword_atomic_max:
case GenXIntrinsic::genx_dword_atomic_min:
case GenXIntrinsic::genx_dword_atomic_or:
case GenXIntrinsic::genx_dword_atomic_sub:
case GenXIntrinsic::genx_dword_atomic_xchg:
case GenXIntrinsic::genx_dword_atomic_xor:
case GenXIntrinsic::genx_dword_atomic2_add:
case GenXIntrinsic::genx_dword_atomic2_and:
case GenXIntrinsic::genx_dword_atomic2_cmpxchg:
case GenXIntrinsic::genx_dword_atomic2_dec:
case GenXIntrinsic::genx_dword_atomic2_fcmpwr:
case GenXIntrinsic::genx_dword_atomic2_fmax:
case GenXIntrinsic::genx_dword_atomic2_fmin:
case GenXIntrinsic::genx_dword_atomic2_imax:
case GenXIntrinsic::genx_dword_atomic2_imin:
case GenXIntrinsic::genx_dword_atomic2_inc:
case GenXIntrinsic::genx_dword_atomic2_max:
case GenXIntrinsic::genx_dword_atomic2_min:
case GenXIntrinsic::genx_dword_atomic2_or:
case GenXIntrinsic::genx_dword_atomic2_sub:
case GenXIntrinsic::genx_dword_atomic2_xchg:
case GenXIntrinsic::genx_dword_atomic2_xor:
case GenXIntrinsic::genx_exp:
case GenXIntrinsic::genx_fbl:
case GenXIntrinsic::genx_fmax:
case GenXIntrinsic::genx_fmin:
case GenXIntrinsic::genx_fptosi_sat:
case GenXIntrinsic::genx_fptoui_sat:
case GenXIntrinsic::genx_frc:
case GenXIntrinsic::genx_gaddr:
case GenXIntrinsic::genx_gather_masked_scaled2:
case GenXIntrinsic::genx_gather_private:
case GenXIntrinsic::genx_gather_scaled:
case GenXIntrinsic::genx_gather_scaled2:
case GenXIntrinsic::genx_gather4_masked_scaled2:
case GenXIntrinsic::genx_gather4_scaled:
case GenXIntrinsic::genx_gather4_scaled2:
case GenXIntrinsic::genx_gather4_typed:
case GenXIntrinsic::genx_group_count:
case GenXIntrinsic::genx_ieee_div:
case GenXIntrinsic::genx_ieee_sqrt:
case GenXIntrinsic::genx_inv:
case GenXIntrinsic::genx_jump_table:
case GenXIntrinsic::genx_line:
case GenXIntrinsic::genx_load:
case GenXIntrinsic::genx_local_id:
case GenXIntrinsic::genx_local_id16:
case GenXIntrinsic::genx_local_size:
case GenXIntrinsic::genx_log:
case GenXIntrinsic::genx_lrp:
case GenXIntrinsic::genx_lzd:
case GenXIntrinsic::genx_media_ld:
case GenXIntrinsic::genx_oword_ld:
case GenXIntrinsic::genx_oword_ld_unaligned:
case GenXIntrinsic::genx_pln:
case GenXIntrinsic::genx_pow:
case GenXIntrinsic::genx_r0:
case GenXIntrinsic::genx_raw_send:
case GenXIntrinsic::genx_raw_send2:
case GenXIntrinsic::genx_raw_sends:
case GenXIntrinsic::genx_raw_sends2:
case GenXIntrinsic::genx_rdpredregion:
case GenXIntrinsic::genx_rdregionf:
case GenXIntrinsic::genx_rdregioni:
case GenXIntrinsic::genx_read_predef_reg:
case GenXIntrinsic::genx_rndd:
case GenXIntrinsic::genx_rnde:
case GenXIntrinsic::genx_rndu:
case GenXIntrinsic::genx_rndz:
case GenXIntrinsic::genx_rol:
case GenXIntrinsic::genx_ror:
case GenXIntrinsic::genx_rsqrt:
case GenXIntrinsic::genx_sample:
case GenXIntrinsic::genx_sample_unorm:
case GenXIntrinsic::genx_sat:
case GenXIntrinsic::genx_sbfe:
case GenXIntrinsic::genx_sfbh:
case GenXIntrinsic::genx_simdcf_get_em:
case GenXIntrinsic::genx_simdcf_goto:
case GenXIntrinsic::genx_simdcf_join:
case GenXIntrinsic::genx_simdcf_predicate:
case GenXIntrinsic::genx_simdcf_remask:
case GenXIntrinsic::genx_simdcf_unmask:
case GenXIntrinsic::genx_sin:
case GenXIntrinsic::genx_smax:
case GenXIntrinsic::genx_smin:
case GenXIntrinsic::genx_smulh:
case GenXIntrinsic::genx_sqrt:
case GenXIntrinsic::genx_sr0:
case GenXIntrinsic::genx_ssad2:
case GenXIntrinsic::genx_ssadd_sat:
case GenXIntrinsic::genx_ssadd3_sat:
case GenXIntrinsic::genx_ssavg:
case GenXIntrinsic::genx_ssavg_sat:
case GenXIntrinsic::genx_ssdp4a:
case GenXIntrinsic::genx_ssdp4a_sat:
case GenXIntrinsic::genx_ssmad:
case GenXIntrinsic::genx_ssmad_sat:
case GenXIntrinsic::genx_ssmul:
case GenXIntrinsic::genx_ssmul_sat:
case GenXIntrinsic::genx_sssad2add:
case GenXIntrinsic::genx_sssad2add_sat:
case GenXIntrinsic::genx_ssshl:
case GenXIntrinsic::genx_ssshl_sat:
case GenXIntrinsic::genx_sstrunc_sat:
case GenXIntrinsic::genx_suadd_sat:
case GenXIntrinsic::genx_suadd3_sat:
case GenXIntrinsic::genx_suavg:
case GenXIntrinsic::genx_suavg_sat:
case GenXIntrinsic::genx_subb:
case GenXIntrinsic::genx_sudp4a:
case GenXIntrinsic::genx_sudp4a_sat:
case GenXIntrinsic::genx_sumad:
case GenXIntrinsic::genx_sumad_sat:
case GenXIntrinsic::genx_sumul:
case GenXIntrinsic::genx_sumul_sat:
case GenXIntrinsic::genx_susad2add:
case GenXIntrinsic::genx_susad2add_sat:
case GenXIntrinsic::genx_sushl:
case GenXIntrinsic::genx_sushl_sat:
case GenXIntrinsic::genx_sutrunc_sat:
case GenXIntrinsic::genx_svm_atomic_add:
case GenXIntrinsic::genx_svm_atomic_and:
case GenXIntrinsic::genx_svm_atomic_cmpxchg:
case GenXIntrinsic::genx_svm_atomic_dec:
case GenXIntrinsic::genx_svm_atomic_fcmpwr:
case GenXIntrinsic::genx_svm_atomic_fmax:
case GenXIntrinsic::genx_svm_atomic_fmin:
case GenXIntrinsic::genx_svm_atomic_imax:
case GenXIntrinsic::genx_svm_atomic_imin:
case GenXIntrinsic::genx_svm_atomic_inc:
case GenXIntrinsic::genx_svm_atomic_max:
case GenXIntrinsic::genx_svm_atomic_min:
case GenXIntrinsic::genx_svm_atomic_or:
case GenXIntrinsic::genx_svm_atomic_sub:
case GenXIntrinsic::genx_svm_atomic_xchg:
case GenXIntrinsic::genx_svm_atomic_xor:
case GenXIntrinsic::genx_svm_block_ld:
case GenXIntrinsic::genx_svm_block_ld_unaligned:
case GenXIntrinsic::genx_svm_gather:
case GenXIntrinsic::genx_svm_gather4_scaled:
case GenXIntrinsic::genx_timestamp:
case GenXIntrinsic::genx_transpose_ld:
case GenXIntrinsic::genx_typed_atomic_add:
case GenXIntrinsic::genx_typed_atomic_and:
case GenXIntrinsic::genx_typed_atomic_cmpxchg:
case GenXIntrinsic::genx_typed_atomic_dec:
case GenXIntrinsic::genx_typed_atomic_fcmpwr:
case GenXIntrinsic::genx_typed_atomic_fmax:
case GenXIntrinsic::genx_typed_atomic_fmin:
case GenXIntrinsic::genx_typed_atomic_imax:
case GenXIntrinsic::genx_typed_atomic_imin:
case GenXIntrinsic::genx_typed_atomic_inc:
case GenXIntrinsic::genx_typed_atomic_max:
case GenXIntrinsic::genx_typed_atomic_min:
case GenXIntrinsic::genx_typed_atomic_or:
case GenXIntrinsic::genx_typed_atomic_sub:
case GenXIntrinsic::genx_typed_atomic_xchg:
case GenXIntrinsic::genx_typed_atomic_xor:
case GenXIntrinsic::genx_ubfe:
case GenXIntrinsic::genx_ufbh:
case GenXIntrinsic::genx_umax:
case GenXIntrinsic::genx_umin:
case GenXIntrinsic::genx_umulh:
case GenXIntrinsic::genx_untyped_atomic_add:
case GenXIntrinsic::genx_untyped_atomic_and:
case GenXIntrinsic::genx_untyped_atomic_cmpxchg:
case GenXIntrinsic::genx_untyped_atomic_dec:
case GenXIntrinsic::genx_untyped_atomic_imax:
case GenXIntrinsic::genx_untyped_atomic_imin:
case GenXIntrinsic::genx_untyped_atomic_inc:
case GenXIntrinsic::genx_untyped_atomic_max:
case GenXIntrinsic::genx_untyped_atomic_min:
case GenXIntrinsic::genx_untyped_atomic_or:
case GenXIntrinsic::genx_untyped_atomic_sub:
case GenXIntrinsic::genx_untyped_atomic_xchg:
case GenXIntrinsic::genx_untyped_atomic_xor:
case GenXIntrinsic::genx_usad2:
case GenXIntrinsic::genx_usadd_sat:
case GenXIntrinsic::genx_usadd3_sat:
case GenXIntrinsic::genx_usavg:
case GenXIntrinsic::genx_usavg_sat:
case GenXIntrinsic::genx_usdp4a:
case GenXIntrinsic::genx_usdp4a_sat:
case GenXIntrinsic::genx_usmad:
case GenXIntrinsic::genx_usmad_sat:
case GenXIntrinsic::genx_usmul:
case GenXIntrinsic::genx_usmul_sat:
case GenXIntrinsic::genx_ussad2add:
case GenXIntrinsic::genx_ussad2add_sat:
case GenXIntrinsic::genx_usshl:
case GenXIntrinsic::genx_usshl_sat:
case GenXIntrinsic::genx_ustrunc_sat:
case GenXIntrinsic::genx_uuadd_sat:
case GenXIntrinsic::genx_uuadd3_sat:
case GenXIntrinsic::genx_uuavg:
case GenXIntrinsic::genx_uuavg_sat:
case GenXIntrinsic::genx_uudp4a:
case GenXIntrinsic::genx_uudp4a_sat:
case GenXIntrinsic::genx_uumad:
case GenXIntrinsic::genx_uumad_sat:
case GenXIntrinsic::genx_uumul:
case GenXIntrinsic::genx_uumul_sat:
case GenXIntrinsic::genx_uusad2add:
case GenXIntrinsic::genx_uusad2add_sat:
case GenXIntrinsic::genx_uushl:
case GenXIntrinsic::genx_uushl_sat:
case GenXIntrinsic::genx_uutrunc_sat:
case GenXIntrinsic::genx_va_1d_convolve_horizontal:
case GenXIntrinsic::genx_va_1d_convolve_vertical:
case GenXIntrinsic::genx_va_1pixel_convolve:
case GenXIntrinsic::genx_va_1pixel_convolve_1x1mode:
case GenXIntrinsic::genx_va_bool_centroid:
case GenXIntrinsic::genx_va_centroid:
case GenXIntrinsic::genx_va_convolve2d:
case GenXIntrinsic::genx_va_correlation_search:
case GenXIntrinsic::genx_va_dilate:
case GenXIntrinsic::genx_va_erode:
case GenXIntrinsic::genx_va_flood_fill:
case GenXIntrinsic::genx_va_lbp_correlation:
case GenXIntrinsic::genx_va_lbp_creation:
case GenXIntrinsic::genx_va_minmax:
case GenXIntrinsic::genx_va_minmax_filter:
case GenXIntrinsic::genx_vload:
case GenXIntrinsic::genx_wrconstregion:
case GenXIntrinsic::genx_write_predef_reg:
case GenXIntrinsic::genx_wrpredpredregion:
case GenXIntrinsic::genx_wrpredregion:
case GenXIntrinsic::genx_wrregionf:
case GenXIntrinsic::genx_wrregioni:
case GenXIntrinsic::genx_zzzzend:
  return true;
}
#endif

// Sorted by length table
#ifdef GET_FUNCTION_RECOGNIZER

struct IntrinsicEntry
{
   unsigned num;
   GenISAIntrinsic::ID id;
   const char* str;
};

static const std::array<IntrinsicEntry,331> LengthTable = {{
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -4, GenISAIntrinsic::GenISA_le, MANGLE("le@")}, { -6, GenISAIntrinsic::GenISA_in, MANGLE("in@")}, 
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -4, GenISAIntrinsic::GenISA_r, MANGLE("r@")}, { -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -4, GenISAIntrinsic::GenISA__convert, MANGLE("_convert@")}, 
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_lush, MANGLE("lush@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { 1, GenISAIntrinsic::GenISA_tf, MANGLE("tf@")}, 
{ 1, GenISAIntrinsic::GenISA_ti, MANGLE("ti@")}, { 1, GenISAIntrinsic::GenISA_tpred, MANGLE("tpred@")}, 
{ 0, GenISAIntrinsic::GenISA_, MANGLE("@")}, { 0, GenISAIntrinsic::GenISA__addr, MANGLE("_addr@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -3, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -3, GenISAIntrinsic::GenISA_src0, MANGLE("src0@")}, 
{ -3, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_osrc0, MANGLE("osrc0@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_ov, MANGLE("ov@")}, { 7, GenISAIntrinsic::GenISA_tomic_add, MANGLE("tomic_add@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_and, MANGLE("tomic_and@")}, { 6, GenISAIntrinsic::GenISA_tomic_cmpxchg, MANGLE("tomic_cmpxchg@")}, 
{ 6, GenISAIntrinsic::GenISA_tomic_dec, MANGLE("tomic_dec@")}, { 7, GenISAIntrinsic::GenISA_tomic_fcmpwr, MANGLE("tomic_fcmpwr@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic_fmax, MANGLE("tomic_fmax@")}, { 8, GenISAIntrinsic::GenISA_tomic_fmin, MANGLE("tomic_fmin@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic_imax, MANGLE("tomic_imax@")}, { 8, GenISAIntrinsic::GenISA_tomic_imin, MANGLE("tomic_imin@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_inc, MANGLE("tomic_inc@")}, { 7, GenISAIntrinsic::GenISA_tomic_max, MANGLE("tomic_max@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_min, MANGLE("tomic_min@")}, { 6, GenISAIntrinsic::GenISA_tomic_or, MANGLE("tomic_or@")}, 
{ 6, GenISAIntrinsic::GenISA_tomic_sub, MANGLE("tomic_sub@")}, { 7, GenISAIntrinsic::GenISA_tomic_xchg, MANGLE("tomic_xchg@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_xor, MANGLE("tomic_xor@")}, { 8, GenISAIntrinsic::GenISA_tomic2_add, MANGLE("tomic2_add@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic2_and, MANGLE("tomic2_and@")}, { 7, GenISAIntrinsic::GenISA_tomic2_cmpxchg, MANGLE("tomic2_cmpxchg@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic2_dec, MANGLE("tomic2_dec@")}, { 8, GenISAIntrinsic::GenISA_tomic2_fcmpwr, MANGLE("tomic2_fcmpwr@")}, 
{ 9, GenISAIntrinsic::GenISA_tomic2_fmax, MANGLE("tomic2_fmax@")}, { 9, GenISAIntrinsic::GenISA_tomic2_fmin, MANGLE("tomic2_fmin@")}, 
{ 9, GenISAIntrinsic::GenISA_tomic2_imax, MANGLE("tomic2_imax@")}, { 9, GenISAIntrinsic::GenISA_tomic2_imin, MANGLE("tomic2_imin@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic2_inc, MANGLE("tomic2_inc@")}, { 8, GenISAIntrinsic::GenISA_tomic2_max, MANGLE("tomic2_max@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic2_min, MANGLE("tomic2_min@")}, { 7, GenISAIntrinsic::GenISA_tomic2_or, MANGLE("tomic2_or@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic2_sub, MANGLE("tomic2_sub@")}, { 8, GenISAIntrinsic::GenISA_tomic2_xchg, MANGLE("tomic2_xchg@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic2_xor, MANGLE("tomic2_xor@")}, { -7, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -3, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -3, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { 0, GenISAIntrinsic::GenISA_masked_scaled2, MANGLE("masked_scaled2@")}, 
{ 0, GenISAIntrinsic::GenISA_private, MANGLE("private@")}, { 6, GenISAIntrinsic::GenISA_scaled, MANGLE("scaled@")}, 
{ 6, GenISAIntrinsic::GenISA_scaled2, MANGLE("scaled2@")}, { 1, GenISAIntrinsic::GenISA__masked_scaled2, MANGLE("_masked_scaled2@")}, 
{ 7, GenISAIntrinsic::GenISA__scaled, MANGLE("_scaled@")}, { 7, GenISAIntrinsic::GenISA__scaled2, MANGLE("_scaled2@")}, 
{ 1, GenISAIntrinsic::GenISA__typed, MANGLE("_typed@")}, { -3, GenISAIntrinsic::GenISA_or, MANGLE("or@")}, 
{ -3, GenISAIntrinsic::GenISA_d, MANGLE("d@")}, { 8, GenISAIntrinsic::GenISA_reboard_bti, MANGLE("reboard_bti@")}, 
{ 10, GenISAIntrinsic::GenISA_reboard_deltas, MANGLE("reboard_deltas@")}, { 10, GenISAIntrinsic::GenISA_reboard_depcnt, MANGLE("reboard_depcnt@")}, 
{ -1, GenISAIntrinsic::GenISA_ount, MANGLE("ount@")}, { 2, GenISAIntrinsic::GenISA_d_x, MANGLE("d_x@")}, 
{ 2, GenISAIntrinsic::GenISA_d_y, MANGLE("d_y@")}, { 2, GenISAIntrinsic::GenISA_d_z, MANGLE("d_z@")}, 
{ -1, GenISAIntrinsic::GenISA_r_local_size, MANGLE("r_local_size@")}, { -2, GenISAIntrinsic::GenISA_v, MANGLE("v@")}, 
{ -2, GenISAIntrinsic::GenISA_rt, MANGLE("rt@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -7, GenISAIntrinsic::GenISA_ble, MANGLE("ble@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ 1, GenISAIntrinsic::GenISA_d, MANGLE("d@")}, { 2, GenISAIntrinsic::GenISA_d_x, MANGLE("d_x@")}, 
{ 2, GenISAIntrinsic::GenISA_d_y, MANGLE("d_y@")}, { 2, GenISAIntrinsic::GenISA_d_z, MANGLE("d_z@")}, 
{ 1, GenISAIntrinsic::GenISA_d16, MANGLE("d16@")}, { -1, GenISAIntrinsic::GenISA_ize, MANGLE("ize@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -1, GenISAIntrinsic::GenISA_d, MANGLE("d@")}, 
{ -1, GenISAIntrinsic::GenISA_t, MANGLE("t@")}, { -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -1, GenISAIntrinsic::GenISA_1, MANGLE("1@")}, { 1, GenISAIntrinsic::GenISA_d, MANGLE("d@")}, 
{ 1, GenISAIntrinsic::GenISA_d_unaligned, MANGLE("d_unaligned@")}, { -1, GenISAIntrinsic::GenISA_t, MANGLE("t@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_ned_surface, MANGLE("ned_surface@")}, { -1, GenISAIntrinsic::GenISA_uffer, MANGLE("uffer@")}, 
{ -1, GenISAIntrinsic::GenISA_ormat_index, MANGLE("ormat_index@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ 1, GenISAIntrinsic::GenISA_d, MANGLE("d@")}, { 1, GenISAIntrinsic::GenISA_d_noresult, MANGLE("d_noresult@")}, 
{ 2, GenISAIntrinsic::GenISA_d2, MANGLE("d2@")}, { 2, GenISAIntrinsic::GenISA_d2_noresult, MANGLE("d2_noresult@")}, 
{ 2, GenISAIntrinsic::GenISA_ds, MANGLE("ds@")}, { 2, GenISAIntrinsic::GenISA_ds_noresult, MANGLE("ds_noresult@")}, 
{ 3, GenISAIntrinsic::GenISA_ds2, MANGLE("ds2@")}, { 3, GenISAIntrinsic::GenISA_ds2_noresult, MANGLE("ds2_noresult@")}, 
{ -5, GenISAIntrinsic::GenISA_egion, MANGLE("egion@")}, { 1, GenISAIntrinsic::GenISA_nf, MANGLE("nf@")}, 
{ 1, GenISAIntrinsic::GenISA_ni, MANGLE("ni@")}, { -6, GenISAIntrinsic::GenISA_edef_reg, MANGLE("edef_reg@")}, 
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -4, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -1, GenISAIntrinsic::GenISA_unorm, MANGLE("unorm@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_r, MANGLE("r@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ 1, GenISAIntrinsic::GenISA__private, MANGLE("_private@")}, { 1, GenISAIntrinsic::GenISA__scaled, MANGLE("_scaled@")}, 
{ 2, GenISAIntrinsic::GenISA_4_scaled, MANGLE("4_scaled@")}, { 2, GenISAIntrinsic::GenISA_4_typed, MANGLE("4_typed@")}, 
{ -3, GenISAIntrinsic::GenISA_se, MANGLE("se@")}, { -3, GenISAIntrinsic::GenISA__2, MANGLE("_2@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { 0, GenISAIntrinsic::GenISA_any, MANGLE("any@")}, 
{ 1, GenISAIntrinsic::GenISA_get_em, MANGLE("get_em@")}, { 1, GenISAIntrinsic::GenISA_goto, MANGLE("goto@")}, 
{ 0, GenISAIntrinsic::GenISA_join, MANGLE("join@")}, { 0, GenISAIntrinsic::GenISA_predicate, MANGLE("predicate@")}, 
{ 0, GenISAIntrinsic::GenISA_remask, MANGLE("remask@")}, { 0, GenISAIntrinsic::GenISA_savemask, MANGLE("savemask@")}, 
{ 0, GenISAIntrinsic::GenISA_unmask, MANGLE("unmask@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -3, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -2, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -1, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ 2, GenISAIntrinsic::GenISA_dd, MANGLE("dd@")}, { 2, GenISAIntrinsic::GenISA_dd_sat, MANGLE("dd_sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -5, GenISAIntrinsic::GenISA__sat, MANGLE("_sat@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -2, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -1, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ 2, GenISAIntrinsic::GenISA_dd, MANGLE("dd@")}, { 2, GenISAIntrinsic::GenISA_dd_sat, MANGLE("dd_sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -5, GenISAIntrinsic::GenISA__sat, MANGLE("_sat@")}, { 5, GenISAIntrinsic::GenISA_mic_add, MANGLE("mic_add@")}, 
{ 5, GenISAIntrinsic::GenISA_mic_and, MANGLE("mic_and@")}, { 4, GenISAIntrinsic::GenISA_mic_cmpxchg, MANGLE("mic_cmpxchg@")}, 
{ 4, GenISAIntrinsic::GenISA_mic_dec, MANGLE("mic_dec@")}, { 5, GenISAIntrinsic::GenISA_mic_fcmpwr, MANGLE("mic_fcmpwr@")}, 
{ 6, GenISAIntrinsic::GenISA_mic_fmax, MANGLE("mic_fmax@")}, { 6, GenISAIntrinsic::GenISA_mic_fmin, MANGLE("mic_fmin@")}, 
{ 6, GenISAIntrinsic::GenISA_mic_imax, MANGLE("mic_imax@")}, { 6, GenISAIntrinsic::GenISA_mic_imin, MANGLE("mic_imin@")}, 
{ 5, GenISAIntrinsic::GenISA_mic_inc, MANGLE("mic_inc@")}, { 5, GenISAIntrinsic::GenISA_mic_max, MANGLE("mic_max@")}, 
{ 5, GenISAIntrinsic::GenISA_mic_min, MANGLE("mic_min@")}, { 4, GenISAIntrinsic::GenISA_mic_or, MANGLE("mic_or@")}, 
{ 4, GenISAIntrinsic::GenISA_mic_sub, MANGLE("mic_sub@")}, { 5, GenISAIntrinsic::GenISA_mic_xchg, MANGLE("mic_xchg@")}, 
{ 5, GenISAIntrinsic::GenISA_mic_xor, MANGLE("mic_xor@")}, { 5, GenISAIntrinsic::GenISA_ck_ld, MANGLE("ck_ld@")}, 
{ 5, GenISAIntrinsic::GenISA_ck_ld_unaligned, MANGLE("ck_ld_unaligned@")}, { 3, GenISAIntrinsic::GenISA_ck_st, MANGLE("ck_st@")}, 
{ 3, GenISAIntrinsic::GenISA_her, MANGLE("her@")}, { 3, GenISAIntrinsic::GenISA_her4_scaled, MANGLE("her4_scaled@")}, 
{ 4, GenISAIntrinsic::GenISA_tter, MANGLE("tter@")}, { 4, GenISAIntrinsic::GenISA_tter4_scaled, MANGLE("tter4_scaled@")}, 
{ 0, GenISAIntrinsic::GenISA_x, MANGLE("x@")}, { 0, GenISAIntrinsic::GenISA_y, MANGLE("y@")}, 
{ -6, GenISAIntrinsic::GenISA_mp, MANGLE("mp@")}, { -6, GenISAIntrinsic::GenISA_se_ld, MANGLE("se_ld@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_add, MANGLE("tomic_add@")}, { 7, GenISAIntrinsic::GenISA_tomic_and, MANGLE("tomic_and@")}, 
{ 6, GenISAIntrinsic::GenISA_tomic_cmpxchg, MANGLE("tomic_cmpxchg@")}, { 6, GenISAIntrinsic::GenISA_tomic_dec, MANGLE("tomic_dec@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_fcmpwr, MANGLE("tomic_fcmpwr@")}, { 8, GenISAIntrinsic::GenISA_tomic_fmax, MANGLE("tomic_fmax@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic_fmin, MANGLE("tomic_fmin@")}, { 8, GenISAIntrinsic::GenISA_tomic_imax, MANGLE("tomic_imax@")}, 
{ 8, GenISAIntrinsic::GenISA_tomic_imin, MANGLE("tomic_imin@")}, { 7, GenISAIntrinsic::GenISA_tomic_inc, MANGLE("tomic_inc@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_max, MANGLE("tomic_max@")}, { 7, GenISAIntrinsic::GenISA_tomic_min, MANGLE("tomic_min@")}, 
{ 6, GenISAIntrinsic::GenISA_tomic_or, MANGLE("tomic_or@")}, { 6, GenISAIntrinsic::GenISA_tomic_sub, MANGLE("tomic_sub@")}, 
{ 7, GenISAIntrinsic::GenISA_tomic_xchg, MANGLE("tomic_xchg@")}, { 7, GenISAIntrinsic::GenISA_tomic_xor, MANGLE("tomic_xor@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_, MANGLE("@")}, { 0, GenISAIntrinsic::GenISA_begin, MANGLE("begin@")}, 
{ 0, GenISAIntrinsic::GenISA_end, MANGLE("end@")}, { 9, GenISAIntrinsic::GenISA__atomic_add, MANGLE("_atomic_add@")}, 
{ 9, GenISAIntrinsic::GenISA__atomic_and, MANGLE("_atomic_and@")}, { 8, GenISAIntrinsic::GenISA__atomic_cmpxchg, MANGLE("_atomic_cmpxchg@")}, 
{ 8, GenISAIntrinsic::GenISA__atomic_dec, MANGLE("_atomic_dec@")}, { 10, GenISAIntrinsic::GenISA__atomic_imax, MANGLE("_atomic_imax@")}, 
{ 10, GenISAIntrinsic::GenISA__atomic_imin, MANGLE("_atomic_imin@")}, { 9, GenISAIntrinsic::GenISA__atomic_inc, MANGLE("_atomic_inc@")}, 
{ 9, GenISAIntrinsic::GenISA__atomic_max, MANGLE("_atomic_max@")}, { 9, GenISAIntrinsic::GenISA__atomic_min, MANGLE("_atomic_min@")}, 
{ 8, GenISAIntrinsic::GenISA__atomic_or, MANGLE("_atomic_or@")}, { 8, GenISAIntrinsic::GenISA__atomic_sub, MANGLE("_atomic_sub@")}, 
{ 9, GenISAIntrinsic::GenISA__atomic_xchg, MANGLE("_atomic_xchg@")}, { 9, GenISAIntrinsic::GenISA__atomic_xor, MANGLE("_atomic_xor@")}, 
{ -3, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -2, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -1, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { 2, GenISAIntrinsic::GenISA_dd, MANGLE("dd@")}, 
{ 2, GenISAIntrinsic::GenISA_dd_sat, MANGLE("dd_sat@")}, { -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -5, GenISAIntrinsic::GenISA__sat, MANGLE("_sat@")}, 
{ -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, { -2, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -1, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -1, GenISAIntrinsic::GenISA_sat, MANGLE("sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ 2, GenISAIntrinsic::GenISA_dd, MANGLE("dd@")}, { 2, GenISAIntrinsic::GenISA_dd_sat, MANGLE("dd_sat@")}, 
{ -2, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -2, GenISAIntrinsic::GenISA_at, MANGLE("at@")}, 
{ -5, GenISAIntrinsic::GenISA__sat, MANGLE("_sat@")}, { 8, GenISAIntrinsic::GenISA_onvolve_horizontal, MANGLE("onvolve_horizontal@")}, 
{ 8, GenISAIntrinsic::GenISA_onvolve_vertical, MANGLE("onvolve_vertical@")}, { 11, GenISAIntrinsic::GenISA_el_convolve, MANGLE("el_convolve@")}, 
{ 11, GenISAIntrinsic::GenISA_el_convolve_1x1mode, MANGLE("el_convolve_1x1mode@")}, { -4, GenISAIntrinsic::GenISA__centroid, MANGLE("_centroid@")}, 
{ -3, GenISAIntrinsic::GenISA_roid, MANGLE("roid@")}, { -2, GenISAIntrinsic::GenISA_olve2d, MANGLE("olve2d@")}, 
{ -2, GenISAIntrinsic::GenISA_elation_search, MANGLE("elation_search@")}, { -4, GenISAIntrinsic::GenISA_te, MANGLE("te@")}, 
{ -4, GenISAIntrinsic::GenISA_e, MANGLE("e@")}, { -4, GenISAIntrinsic::GenISA_d_fill, MANGLE("d_fill@")}, 
{ 12, GenISAIntrinsic::GenISA_1d_convolve_horizontal, MANGLE("1d_convolve_horizontal@")}, { 12, GenISAIntrinsic::GenISA_1d_convolve_vertical, MANGLE("1d_convolve_vertical@")}, 
{ 1, GenISAIntrinsic::GenISA_1pixel_convolve, MANGLE("1pixel_convolve@")}, { 0, GenISAIntrinsic::GenISA_convolve2d, MANGLE("convolve2d@")}, 
{ 0, GenISAIntrinsic::GenISA_dilate, MANGLE("dilate@")}, { 0, GenISAIntrinsic::GenISA_erode, MANGLE("erode@")}, 
{ 5, GenISAIntrinsic::GenISA_lbp_correlation, MANGLE("lbp_correlation@")}, { 5, GenISAIntrinsic::GenISA_lbp_creation, MANGLE("lbp_creation@")}, 
{ 0, GenISAIntrinsic::GenISA_minmax_filter, MANGLE("minmax_filter@")}, { 1, GenISAIntrinsic::GenISA_correlation, MANGLE("correlation@")}, 
{ 1, GenISAIntrinsic::GenISA_creation, MANGLE("creation@")}, { 2, GenISAIntrinsic::GenISA_ax, MANGLE("ax@")}, 
{ 2, GenISAIntrinsic::GenISA_ax_filter, MANGLE("ax_filter@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -6, GenISAIntrinsic::GenISA_, MANGLE("@")}, 
{ -5, GenISAIntrinsic::GenISA_region, MANGLE("region@")}, { -5, GenISAIntrinsic::GenISA_redef_reg, MANGLE("redef_reg@")}, 
{ -1, GenISAIntrinsic::GenISA_redregion, MANGLE("redregion@")}, { -1, GenISAIntrinsic::GenISA_egion, MANGLE("egion@")}, 
{ 1, GenISAIntrinsic::GenISA_nf, MANGLE("nf@")}, { 1, GenISAIntrinsic::GenISA_ni, MANGLE("ni@")}, 
{ -7, GenISAIntrinsic::GenISA_, MANGLE("@")}, { -7, GenISAIntrinsic::GenISA_, MANGLE("@")}
}};

std::string input_name(Name);
unsigned start = 0;
unsigned end = 331;
unsigned initial_size = end;
unsigned cur_pos = (start + end) / 2;
char letter;
char input_letter;
bool isError = false;
bool bump = false;
unsigned start_index = std::string("llvm.genx.GenISA.").size();
for (unsigned i = 0; i < Len; i++)
{
    input_letter = input_name[start_index + i];
    unsigned counter = 0;
    while (1)
    {
        if (counter == initial_size || cur_pos >= initial_size)
        {
            isError = true;
            break;
        }
        counter++;
        letter = LengthTable[cur_pos].str[i];
        if (letter == input_letter)
        {
            if (LengthTable[cur_pos].num == i)
                return LengthTable[cur_pos].id;
            bump = true;
            break;
        }
        else if (input_letter == '\0' && letter == '@')
            return LengthTable[cur_pos].id;
        else if (input_letter == '.' && letter == '_')
            break;
        else if (input_letter == '.' && letter == '@')
        {
            unsigned original_cur_pos = cur_pos;
            while (1)
            {
                if (cur_pos >= initial_size || LengthTable[cur_pos].num < i)
                    return LengthTable[original_cur_pos].id;
                if (LengthTable[cur_pos].str[i] == '_')
                    break;
                cur_pos += 1;
            }
            break;
        }
        else if ((bump && letter < input_letter) || letter == '@')
        {
            cur_pos += 1;
            continue;
        }
        else if (bump && letter > input_letter)
        {
            cur_pos -= 1;
            continue;
        }
        else if (letter < input_letter)
            start = cur_pos;
        else
            end = cur_pos;
        cur_pos = (start + end) / 2;
    }
    if (isError)
        break;
}

#endif

// Global intrinsic function declaration type table.
#ifdef GET_INTRINSIC_GENERATOR_GLOBAL
static const unsigned IIT_Table[] = {
  (1U<<31) | 0, (1U<<31) | 39, 0x3F, 0x2F2F, 0x1F1F, 0x1F9F1F, (1U<<31) | 79, (1U<<31) | 88, 
  0xCF1F, 0x1F1, 0x8F1F, 0x1F1, (1U<<31) | 98, 0x0, (1U<<31) | 115, (1U<<31) | 126, 
  0x1F1F, 0x0, 0x9F1F, 0x4, 0x2F2F, 0x1F1F, 0x1F1F, 0x1F1F, 
  0x31F1F, 0x2F2F, 0x2F2F2F, 0x2F2F2F, 0x2F2F2F, (1U<<31) | 136, (1U<<31) | 146, (1U<<31) | 154, 
  (1U<<31) | 169, (1U<<31) | 179, 0x2F2F2F, 0x30, (1U<<31) | 187, (1U<<31) | 199, (1U<<31) | 211, (1U<<31) | 225, 
  (1U<<31) | 235, (1U<<31) | 249, (1U<<31) | 261, (1U<<31) | 273, (1U<<31) | 285, (1U<<31) | 297, (1U<<31) | 307, (1U<<31) | 319, 
  (1U<<31) | 331, (1U<<31) | 343, (1U<<31) | 355, (1U<<31) | 367, (1U<<31) | 379, (1U<<31) | 389, (1U<<31) | 399, 0x3F4BF3F, 
  (1U<<31) | 411, (1U<<31) | 423, (1U<<31) | 433, (1U<<31) | 443, (1U<<31) | 453, 0x3F4BF3F, (1U<<31) | 463, (1U<<31) | 473, 
  (1U<<31) | 483, (1U<<31) | 493, (1U<<31) | 503, (1U<<31) | 513, 0x2F2F, 0x0F5, 0x1F1F, 0x20, 
  0xAFAF2F, 0xAFAF2F, 0xAF1F, 0xAF1F, 0x2F2F, 0xCF1F, (1U<<31) | 523, (1U<<31) | 534, 
  (1U<<31) | 545, (1U<<31) | 558, (1U<<31) | 567, (1U<<31) | 578, (1U<<31) | 591, (1U<<31) | 600, 0x3, 0x4, 
  0x4, 0x2C, 0x4, 0x3F, 0x4, 0x4, 0x4, 0x4B, 
  0x2F2F2F, 0x2F2F, 0x2F2F, (1U<<31) | 615, 0x4, 0x2F7A2F, (1U<<31) | 621, 0x3F, 
  0x3B, 0x3B, 0x3B, 0x3F, 0x3F, 0x2F2F, 0x2F2F2F2F, 0x1F1F, 
  0x4444443F, (1U<<31) | 632, (1U<<31) | 642, 0x0F0, 0x4443F, 0x4443F, 0x3F440, 0xAF7A2F, 
  0x2F2F2F, 0x44, 0x5, 0x4F4, 0x1F, (1U<<31) | 645, (1U<<31) | 657, (1U<<31) | 666, 
  (1U<<31) | 682, (1U<<31) | 694, (1U<<31) | 709, (1U<<31) | 721, (1U<<31) | 740, 0x49F1F, (1U<<31) | 755, (1U<<31) | 766, 
  0x8F40F, 0x2F2F, 0x2F2F, 0x2F2F, 0x2F2F, 0x9F9F1F, 0x9F9F1F, 0x2F2F, 
  (1U<<31) | 777, (1U<<31) | 789, 0x2F2F, 0x20, 0x1F1F1F1F, (1U<<31) | 799, (1U<<31) | 809, (1U<<31) | 821, 
  (1U<<31) | 833, 0x30, 0x40, 0x1F1F, 0x3F1, 0x3F3F, (1U<<31) | 847, (1U<<31) | 860, 
  0x3F3F3F, 0x43F3F, 0x3F4, 0x443F, 0x2F2F, 0x9F9F1F, 0x9F9F1F, 0x9F9F1F, 
  0x2F2F, 0x1F, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 869, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 878, 
  (1U<<31) | 887, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 
  0x9F9F1F, 0x9F1F, 0x9F9F1F, (1U<<31) | 896, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 905, (1U<<31) | 915, 
  (1U<<31) | 924, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 
  0x9F9F1F, 0x9F1F, (1U<<31) | 933, (1U<<31) | 944, (1U<<31) | 955, (1U<<31) | 968, (1U<<31) | 977, (1U<<31) | 990, 
  (1U<<31) | 1001, (1U<<31) | 1012, (1U<<31) | 1023, (1U<<31) | 1034, (1U<<31) | 1043, (1U<<31) | 1054, (1U<<31) | 1065, (1U<<31) | 1076, 
  (1U<<31) | 1087, (1U<<31) | 1098, 0x9F3F, 0x9F3F, 0xBF1F0, (1U<<31) | 1109, (1U<<31) | 1119, (1U<<31) | 1131, 
  (1U<<31) | 1140, 0x3, 0x3, 0x1F, 0x44443F, (1U<<31) | 1151, (1U<<31) | 1167, (1U<<31) | 1183, 
  (1U<<31) | 1201, (1U<<31) | 1215, (1U<<31) | 1233, (1U<<31) | 1249, (1U<<31) | 1265, (1U<<31) | 1281, (1U<<31) | 1297, (1U<<31) | 1311, 
  (1U<<31) | 1327, (1U<<31) | 1343, (1U<<31) | 1359, (1U<<31) | 1375, (1U<<31) | 1391, 0x1F1F1F1F, 0x1F1F, 0x9F9F1F, 
  0x9F9F1F, 0x9F9F1F, 0x4, 0x40, (1U<<31) | 1407, (1U<<31) | 1420, (1U<<31) | 1433, (1U<<31) | 1448, 
  (1U<<31) | 1459, (1U<<31) | 1472, (1U<<31) | 1485, (1U<<31) | 1496, (1U<<31) | 1509, (1U<<31) | 1522, (1U<<31) | 1535, (1U<<31) | 1548, 
  (1U<<31) | 1561, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 1574, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 1583, (1U<<31) | 1592, 
  0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 
  0x9F1F, 0x9F9F1F, (1U<<31) | 1601, 0x9F9F1F, 0x9F9F1F, (1U<<31) | 1610, (1U<<31) | 1619, 0x1F9F9F1F, 
  0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 0x1F9F9F1F, 0x1F9F9F1F, 0x9F9F1F, 0x9F9F1F, 0x9F1F, 
  0x477441F, 0x477441F, (1U<<31) | 1628, 0x77441F, 0x227741F, 0x27741F, 0x477441F, (1U<<31) | 1638, 
  0x477441F, 0x477441F, 0x3339F21F, (1U<<31) | 1650, (1U<<31) | 1660, (1U<<31) | 1670, (1U<<31) | 1682, 0x33477440, 
  0x33477440, 0x33437740, 0x33447740, (1U<<31) | 1692, 0x37741F, 0x47741F, 0x47741F, (1U<<31) | 1703, 
  0xCF3F, 0xCF3F0, 0x20, (1U<<31) | 1713, 0x8F40F, (1U<<31) | 1728, 0x49F1F1F, (1U<<31) | 1738, 
  (1U<<31) | 1753, 0x0, 0x3F, 
};

static const unsigned char IIT_LongEncodingTable[] = {
  /* 0 */ 15, 3, 4, 15, 11, 4, 3, 4, 15, 19, 15, 27, 15, 35, 15, 43, 15, 51, 15, 59, 15, 67, 15, 75, 15, 83, 15, 91, 15, 99, 15, 107, 15, 115, 15, 123, 15, 131, 0, 
  /* 39 */ 15, 3, 4, 15, 11, 4, 3, 4, 4, 15, 19, 15, 27, 15, 35, 15, 43, 15, 51, 15, 59, 15, 67, 15, 75, 15, 83, 15, 91, 15, 99, 15, 107, 15, 115, 15, 123, 15, 131, 0, 
  /* 79 */ 15, 1, 15, 9, 15, 9, 15, 9, 0, 
  /* 88 */ 21, 15, 1, 15, 9, 15, 1, 15, 1, 0, 
  /* 98 */ 15, 3, 4, 4, 4, 7, 7, 7, 7, 7, 4, 4, 4, 7, 4, 2, 0, 
  /* 115 */ 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 0, 
  /* 126 */ 15, 1, 15, 9, 15, 9, 15, 9, 2, 0, 
  /* 136 */ 15, 3, 15, 3, 15, 11, 15, 19, 4, 0, 
  /* 146 */ 15, 3, 15, 11, 15, 19, 4, 0, 
  /* 154 */ 15, 3, 15, 11, 15, 19, 15, 27, 4, 4, 4, 4, 4, 4, 0, 
  /* 169 */ 15, 3, 15, 3, 15, 11, 15, 19, 4, 0, 
  /* 179 */ 15, 3, 15, 11, 15, 19, 4, 0, 
  /* 187 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 199 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 211 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 15, 3, 15, 3, 0, 
  /* 225 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 0, 
  /* 235 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 15, 3, 0, 
  /* 249 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 261 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 273 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 285 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 297 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 0, 
  /* 307 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 319 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 331 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 343 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 355 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 367 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 379 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 389 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 399 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 411 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 15, 3, 0, 
  /* 423 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 433 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 443 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 453 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 463 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 473 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 483 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 493 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 503 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 513 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 523 */ 15, 3, 4, 3, 4, 4, 15, 9, 15, 19, 0, 
  /* 534 */ 15, 3, 15, 11, 15, 20, 15, 25, 15, 3, 0, 
  /* 545 */ 15, 3, 15, 11, 4, 3, 4, 4, 15, 17, 15, 3, 0, 
  /* 558 */ 15, 3, 4, 3, 4, 4, 15, 9, 0, 
  /* 567 */ 15, 3, 4, 3, 4, 4, 15, 9, 15, 19, 0, 
  /* 578 */ 15, 3, 15, 11, 4, 3, 4, 4, 15, 17, 15, 3, 0, 
  /* 591 */ 15, 3, 4, 3, 4, 4, 15, 9, 0, 
  /* 600 */ 15, 3, 4, 15, 11, 4, 15, 19, 15, 19, 15, 19, 15, 3, 0, 
  /* 615 */ 15, 4, 15, 9, 29, 0, 
  /* 621 */ 15, 3, 4, 4, 15, 9, 15, 9, 15, 9, 0, 
  /* 632 */ 0, 4, 4, 4, 4, 4, 4, 15, 3, 0, 
  /* 642 */ 0, 29, 0, 
  /* 645 */ 15, 3, 4, 15, 9, 4, 4, 15, 19, 15, 3, 0, 
  /* 657 */ 0, 4, 15, 1, 4, 4, 15, 11, 0, 
  /* 666 */ 15, 3, 2, 2, 15, 11, 2, 2, 2, 4, 4, 15, 19, 15, 3, 0, 
  /* 682 */ 0, 2, 2, 15, 3, 2, 2, 4, 4, 15, 11, 0, 
  /* 694 */ 15, 3, 4, 15, 9, 2, 4, 4, 15, 19, 15, 27, 15, 3, 0, 
  /* 709 */ 0, 4, 15, 1, 2, 4, 4, 15, 11, 15, 19, 0, 
  /* 721 */ 15, 3, 2, 2, 15, 11, 2, 2, 2, 2, 4, 4, 15, 19, 15, 27, 15, 3, 0, 
  /* 740 */ 0, 2, 2, 15, 3, 2, 2, 2, 4, 4, 15, 11, 15, 19, 0, 
  /* 755 */ 15, 2, 15, 11, 4, 4, 4, 15, 17, 4, 0, 
  /* 766 */ 15, 1, 15, 11, 4, 4, 4, 15, 17, 4, 0, 
  /* 777 */ 15, 3, 4, 4, 4, 15, 10, 15, 10, 15, 10, 0, 
  /* 789 */ 15, 3, 4, 4, 4, 7, 7, 7, 7, 0, 
  /* 799 */ 0, 15, 3, 15, 12, 15, 17, 15, 27, 0, 
  /* 809 */ 0, 15, 3, 4, 3, 4, 4, 15, 9, 15, 19, 0, 
  /* 821 */ 0, 15, 3, 4, 3, 4, 4, 15, 9, 15, 19, 0, 
  /* 833 */ 0, 4, 15, 3, 4, 15, 11, 15, 11, 15, 11, 15, 19, 0, 
  /* 847 */ 22, 15, 3, 15, 11, 1, 15, 3, 15, 11, 15, 11, 0, 
  /* 860 */ 21, 15, 3, 1, 15, 3, 15, 11, 0, 
  /* 869 */ 15, 1, 15, 9, 15, 9, 15, 9, 0, 
  /* 878 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 887 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 896 */ 15, 1, 15, 9, 15, 9, 15, 9, 0, 
  /* 905 */ 21, 15, 1, 15, 9, 15, 1, 15, 1, 0, 
  /* 915 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 924 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 933 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 944 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 955 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 15, 3, 0, 
  /* 968 */ 15, 3, 15, 11, 15, 17, 15, 3, 0, 
  /* 977 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 15, 3, 0, 
  /* 990 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1001 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1012 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1023 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1034 */ 15, 3, 15, 11, 15, 17, 15, 3, 0, 
  /* 1043 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1054 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1065 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1076 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1087 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1098 */ 15, 3, 15, 11, 15, 17, 15, 3, 15, 3, 0, 
  /* 1109 */ 15, 3, 15, 11, 4, 15, 17, 15, 3, 0, 
  /* 1119 */ 15, 3, 15, 11, 4, 3, 5, 15, 17, 15, 3, 0, 
  /* 1131 */ 0, 15, 3, 4, 15, 9, 15, 19, 0, 
  /* 1140 */ 0, 15, 3, 4, 3, 5, 15, 9, 15, 19, 0, 
  /* 1151 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1167 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1183 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1201 */ 15, 3, 15, 11, 4, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1215 */ 15, 3, 15, 11, 4, 15, 3, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1233 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1249 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1265 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1281 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1297 */ 15, 3, 15, 11, 4, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1311 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1327 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1343 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1359 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1375 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1391 */ 15, 3, 15, 11, 4, 15, 3, 15, 17, 15, 17, 15, 17, 15, 17, 0, 
  /* 1407 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1420 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1433 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 15, 3, 0, 
  /* 1448 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 0, 
  /* 1459 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1472 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1485 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 0, 
  /* 1496 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1509 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1522 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1535 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1548 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1561 */ 15, 3, 15, 11, 4, 4, 15, 3, 15, 3, 15, 3, 0, 
  /* 1574 */ 15, 1, 15, 9, 15, 9, 15, 9, 0, 
  /* 1583 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 1592 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 1601 */ 15, 1, 15, 9, 15, 9, 15, 9, 0, 
  /* 1610 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 1619 */ 15, 3, 15, 11, 15, 19, 15, 27, 0, 
  /* 1628 */ 15, 1, 4, 4, 7, 7, 4, 15, 9, 0, 
  /* 1638 */ 15, 1, 4, 7, 7, 7, 7, 2, 2, 2, 2, 0, 
  /* 1650 */ 0, 4, 4, 7, 7, 4, 4, 3, 3, 0, 
  /* 1660 */ 0, 4, 4, 7, 7, 4, 4, 3, 3, 0, 
  /* 1670 */ 0, 4, 4, 7, 7, 4, 15, 1, 4, 3, 3, 0, 
  /* 1682 */ 0, 4, 4, 7, 7, 4, 4, 3, 3, 0, 
  /* 1692 */ 0, 4, 4, 7, 7, 4, 4, 4, 3, 3, 0, 
  /* 1703 */ 15, 1, 4, 4, 7, 7, 4, 4, 4, 0, 
  /* 1713 */ 15, 3, 15, 3, 15, 11, 4, 4, 4, 15, 17, 4, 15, 25, 0, 
  /* 1728 */ 15, 1, 15, 1, 15, 9, 4, 15, 1, 0, 
  /* 1738 */ 15, 3, 15, 3, 15, 10, 4, 4, 4, 15, 17, 4, 15, 25, 0, 
  /* 1753 */ 15, 3, 15, 3, 15, 9, 4, 4, 4, 15, 17, 4, 15, 25, 0, 
  255
};

#endif

// Add parameter attributes that are not common to all intrinsics.
#ifdef GET_INTRINSIC_ATTRIBUTES
AttributeList GenXIntrinsic::getAttributes(LLVMContext &C, GenXIntrinsic::ID id) {
  static const uint8_t IntrinsicsToAttributesMap[] = {
    1, // llvm.genx.3d.load
    1, // llvm.genx.3d.sample
    2, // llvm.genx.aaaabegin
    3, // llvm.genx.absf
    3, // llvm.genx.absi
    3, // llvm.genx.add.addr
    3, // llvm.genx.add3
    3, // llvm.genx.addc
    3, // llvm.genx.address.convert
    3, // llvm.genx.all
    2, // llvm.genx.alloca
    3, // llvm.genx.any
    1, // llvm.genx.avs
    4, // llvm.genx.barrier
    3, // llvm.genx.bfi
    3, // llvm.genx.bfn
    3, // llvm.genx.bfrev
    2, // llvm.genx.cache.flush
    3, // llvm.genx.cbit
    1, // llvm.genx.ce0
    3, // llvm.genx.constantf
    3, // llvm.genx.constanti
    3, // llvm.genx.constantpred
    3, // llvm.genx.convert
    3, // llvm.genx.convert.addr
    3, // llvm.genx.cos
    3, // llvm.genx.dp2
    3, // llvm.genx.dp3
    3, // llvm.genx.dp4
    3, // llvm.genx.dpas
    3, // llvm.genx.dpas.nosrc0
    3, // llvm.genx.dpas2
    3, // llvm.genx.dpasw
    3, // llvm.genx.dpasw.nosrc0
    3, // llvm.genx.dph
    2, // llvm.genx.dummy.mov
    2, // llvm.genx.dword.atomic.add
    2, // llvm.genx.dword.atomic.and
    2, // llvm.genx.dword.atomic.cmpxchg
    2, // llvm.genx.dword.atomic.dec
    2, // llvm.genx.dword.atomic.fcmpwr
    2, // llvm.genx.dword.atomic.fmax
    2, // llvm.genx.dword.atomic.fmin
    2, // llvm.genx.dword.atomic.imax
    2, // llvm.genx.dword.atomic.imin
    2, // llvm.genx.dword.atomic.inc
    2, // llvm.genx.dword.atomic.max
    2, // llvm.genx.dword.atomic.min
    2, // llvm.genx.dword.atomic.or
    2, // llvm.genx.dword.atomic.sub
    2, // llvm.genx.dword.atomic.xchg
    2, // llvm.genx.dword.atomic.xor
    2, // llvm.genx.dword.atomic2.add
    2, // llvm.genx.dword.atomic2.and
    2, // llvm.genx.dword.atomic2.cmpxchg
    2, // llvm.genx.dword.atomic2.dec
    2, // llvm.genx.dword.atomic2.fcmpwr
    2, // llvm.genx.dword.atomic2.fmax
    2, // llvm.genx.dword.atomic2.fmin
    2, // llvm.genx.dword.atomic2.imax
    2, // llvm.genx.dword.atomic2.imin
    2, // llvm.genx.dword.atomic2.inc
    2, // llvm.genx.dword.atomic2.max
    2, // llvm.genx.dword.atomic2.min
    2, // llvm.genx.dword.atomic2.or
    2, // llvm.genx.dword.atomic2.sub
    2, // llvm.genx.dword.atomic2.xchg
    2, // llvm.genx.dword.atomic2.xor
    3, // llvm.genx.exp
    3, // llvm.genx.faddr
    3, // llvm.genx.fbl
    2, // llvm.genx.fence
    3, // llvm.genx.fmax
    3, // llvm.genx.fmin
    3, // llvm.genx.fptosi.sat
    3, // llvm.genx.fptoui.sat
    3, // llvm.genx.frc
    3, // llvm.genx.gaddr
    1, // llvm.genx.gather.masked.scaled2
    1, // llvm.genx.gather.private
    1, // llvm.genx.gather.scaled
    1, // llvm.genx.gather.scaled2
    1, // llvm.genx.gather4.masked.scaled2
    1, // llvm.genx.gather4.scaled
    1, // llvm.genx.gather4.scaled2
    1, // llvm.genx.gather4.typed
    3, // llvm.genx.get.color
    3, // llvm.genx.get.hwid
    3, // llvm.genx.get.scoreboard.bti
    3, // llvm.genx.get.scoreboard.deltas
    3, // llvm.genx.get.scoreboard.depcnt
    3, // llvm.genx.group.count
    3, // llvm.genx.group.id.x
    3, // llvm.genx.group.id.y
    3, // llvm.genx.group.id.z
    3, // llvm.genx.group.or.local.size
    3, // llvm.genx.ieee.div
    3, // llvm.genx.ieee.sqrt
    3, // llvm.genx.inv
    3, // llvm.genx.jump.table
    3, // llvm.genx.lane.id
    3, // llvm.genx.line
    1, // llvm.genx.load
    3, // llvm.genx.local.id
    3, // llvm.genx.local.id.x
    3, // llvm.genx.local.id.y
    3, // llvm.genx.local.id.z
    3, // llvm.genx.local.id16
    3, // llvm.genx.local.size
    3, // llvm.genx.log
    3, // llvm.genx.lrp
    3, // llvm.genx.lzd
    1, // llvm.genx.media.ld
    2, // llvm.genx.media.st
    2, // llvm.genx.output
    2, // llvm.genx.output.1
    1, // llvm.genx.oword.ld
    1, // llvm.genx.oword.ld.unaligned
    2, // llvm.genx.oword.st
    3, // llvm.genx.pln
    3, // llvm.genx.pow
    3, // llvm.genx.predefined.surface
    2, // llvm.genx.print.buffer
    3, // llvm.genx.print.format.index
    1, // llvm.genx.r0
    2, // llvm.genx.raw.send
    2, // llvm.genx.raw.send.noresult
    2, // llvm.genx.raw.send2
    2, // llvm.genx.raw.send2.noresult
    2, // llvm.genx.raw.sends
    2, // llvm.genx.raw.sends.noresult
    2, // llvm.genx.raw.sends2
    2, // llvm.genx.raw.sends2.noresult
    3, // llvm.genx.rdpredregion
    3, // llvm.genx.rdregionf
    3, // llvm.genx.rdregioni
    1, // llvm.genx.read.predef.reg
    3, // llvm.genx.rndd
    3, // llvm.genx.rnde
    3, // llvm.genx.rndu
    3, // llvm.genx.rndz
    3, // llvm.genx.rol
    3, // llvm.genx.ror
    3, // llvm.genx.rsqrt
    1, // llvm.genx.sample
    1, // llvm.genx.sample.unorm
    3, // llvm.genx.sat
    4, // llvm.genx.sbarrier
    3, // llvm.genx.sbfe
    2, // llvm.genx.scatter.private
    2, // llvm.genx.scatter.scaled
    2, // llvm.genx.scatter4.scaled
    2, // llvm.genx.scatter4.typed
    2, // llvm.genx.set.pause
    2, // llvm.genx.set.sr0.2
    3, // llvm.genx.sfbh
    2, // llvm.genx.simdcf.any
    5, // llvm.genx.simdcf.get.em
    3, // llvm.genx.simdcf.goto
    2, // llvm.genx.simdcf.join
    2, // llvm.genx.simdcf.predicate
    5, // llvm.genx.simdcf.remask
    5, // llvm.genx.simdcf.savemask
    5, // llvm.genx.simdcf.unmask
    3, // llvm.genx.sin
    3, // llvm.genx.smax
    3, // llvm.genx.smin
    3, // llvm.genx.smulh
    3, // llvm.genx.sqrt
    1, // llvm.genx.sr0
    3, // llvm.genx.ssad2
    3, // llvm.genx.ssadd.sat
    3, // llvm.genx.ssadd3.sat
    3, // llvm.genx.ssavg
    3, // llvm.genx.ssavg.sat
    3, // llvm.genx.ssdp4a
    3, // llvm.genx.ssdp4a.sat
    3, // llvm.genx.ssmad
    3, // llvm.genx.ssmad.sat
    3, // llvm.genx.ssmul
    3, // llvm.genx.ssmul.sat
    3, // llvm.genx.sssad2add
    3, // llvm.genx.sssad2add.sat
    3, // llvm.genx.ssshl
    3, // llvm.genx.ssshl.sat
    3, // llvm.genx.sstrunc.sat
    3, // llvm.genx.suadd.sat
    3, // llvm.genx.suadd3.sat
    3, // llvm.genx.suavg
    3, // llvm.genx.suavg.sat
    3, // llvm.genx.subb
    3, // llvm.genx.sudp4a
    3, // llvm.genx.sudp4a.sat
    3, // llvm.genx.sumad
    3, // llvm.genx.sumad.sat
    3, // llvm.genx.sumul
    3, // llvm.genx.sumul.sat
    3, // llvm.genx.susad2add
    3, // llvm.genx.susad2add.sat
    3, // llvm.genx.sushl
    3, // llvm.genx.sushl.sat
    3, // llvm.genx.sutrunc.sat
    2, // llvm.genx.svm.atomic.add
    2, // llvm.genx.svm.atomic.and
    2, // llvm.genx.svm.atomic.cmpxchg
    2, // llvm.genx.svm.atomic.dec
    2, // llvm.genx.svm.atomic.fcmpwr
    2, // llvm.genx.svm.atomic.fmax
    2, // llvm.genx.svm.atomic.fmin
    2, // llvm.genx.svm.atomic.imax
    2, // llvm.genx.svm.atomic.imin
    2, // llvm.genx.svm.atomic.inc
    2, // llvm.genx.svm.atomic.max
    2, // llvm.genx.svm.atomic.min
    2, // llvm.genx.svm.atomic.or
    2, // llvm.genx.svm.atomic.sub
    2, // llvm.genx.svm.atomic.xchg
    2, // llvm.genx.svm.atomic.xor
    1, // llvm.genx.svm.block.ld
    1, // llvm.genx.svm.block.ld.unaligned
    2, // llvm.genx.svm.block.st
    1, // llvm.genx.svm.gather
    1, // llvm.genx.svm.gather4.scaled
    2, // llvm.genx.svm.scatter
    2, // llvm.genx.svm.scatter4.scaled
    3, // llvm.genx.thread.x
    3, // llvm.genx.thread.y
    2, // llvm.genx.timestamp
    1, // llvm.genx.transpose.ld
    2, // llvm.genx.typed.atomic.add
    2, // llvm.genx.typed.atomic.and
    2, // llvm.genx.typed.atomic.cmpxchg
    2, // llvm.genx.typed.atomic.dec
    2, // llvm.genx.typed.atomic.fcmpwr
    2, // llvm.genx.typed.atomic.fmax
    2, // llvm.genx.typed.atomic.fmin
    2, // llvm.genx.typed.atomic.imax
    2, // llvm.genx.typed.atomic.imin
    2, // llvm.genx.typed.atomic.inc
    2, // llvm.genx.typed.atomic.max
    2, // llvm.genx.typed.atomic.min
    2, // llvm.genx.typed.atomic.or
    2, // llvm.genx.typed.atomic.sub
    2, // llvm.genx.typed.atomic.xchg
    2, // llvm.genx.typed.atomic.xor
    3, // llvm.genx.ubfe
    3, // llvm.genx.ufbh
    3, // llvm.genx.umax
    3, // llvm.genx.umin
    3, // llvm.genx.umulh
    5, // llvm.genx.unmask.begin
    5, // llvm.genx.unmask.end
    2, // llvm.genx.untyped.atomic.add
    2, // llvm.genx.untyped.atomic.and
    2, // llvm.genx.untyped.atomic.cmpxchg
    2, // llvm.genx.untyped.atomic.dec
    2, // llvm.genx.untyped.atomic.imax
    2, // llvm.genx.untyped.atomic.imin
    2, // llvm.genx.untyped.atomic.inc
    2, // llvm.genx.untyped.atomic.max
    2, // llvm.genx.untyped.atomic.min
    2, // llvm.genx.untyped.atomic.or
    2, // llvm.genx.untyped.atomic.sub
    2, // llvm.genx.untyped.atomic.xchg
    2, // llvm.genx.untyped.atomic.xor
    3, // llvm.genx.usad2
    3, // llvm.genx.usadd.sat
    3, // llvm.genx.usadd3.sat
    3, // llvm.genx.usavg
    3, // llvm.genx.usavg.sat
    3, // llvm.genx.usdp4a
    3, // llvm.genx.usdp4a.sat
    3, // llvm.genx.usmad
    3, // llvm.genx.usmad.sat
    3, // llvm.genx.usmul
    3, // llvm.genx.usmul.sat
    3, // llvm.genx.ussad2add
    3, // llvm.genx.ussad2add.sat
    3, // llvm.genx.usshl
    3, // llvm.genx.usshl.sat
    3, // llvm.genx.ustrunc.sat
    3, // llvm.genx.uuadd.sat
    3, // llvm.genx.uuadd3.sat
    3, // llvm.genx.uuavg
    3, // llvm.genx.uuavg.sat
    3, // llvm.genx.uudp4a
    3, // llvm.genx.uudp4a.sat
    3, // llvm.genx.uumad
    3, // llvm.genx.uumad.sat
    3, // llvm.genx.uumul
    3, // llvm.genx.uumul.sat
    3, // llvm.genx.uusad2add
    3, // llvm.genx.uusad2add.sat
    3, // llvm.genx.uushl
    3, // llvm.genx.uushl.sat
    3, // llvm.genx.uutrunc.sat
    1, // llvm.genx.va.1d.convolve.horizontal
    1, // llvm.genx.va.1d.convolve.vertical
    1, // llvm.genx.va.1pixel.convolve
    1, // llvm.genx.va.1pixel.convolve.1x1mode
    1, // llvm.genx.va.bool.centroid
    1, // llvm.genx.va.centroid
    1, // llvm.genx.va.convolve2d
    1, // llvm.genx.va.correlation.search
    1, // llvm.genx.va.dilate
    1, // llvm.genx.va.erode
    1, // llvm.genx.va.flood.fill
    2, // llvm.genx.va.hdc.1d.convolve.horizontal
    2, // llvm.genx.va.hdc.1d.convolve.vertical
    2, // llvm.genx.va.hdc.1pixel.convolve
    2, // llvm.genx.va.hdc.convolve2d
    2, // llvm.genx.va.hdc.dilate
    2, // llvm.genx.va.hdc.erode
    2, // llvm.genx.va.hdc.lbp.correlation
    2, // llvm.genx.va.hdc.lbp.creation
    2, // llvm.genx.va.hdc.minmax.filter
    1, // llvm.genx.va.lbp.correlation
    1, // llvm.genx.va.lbp.creation
    1, // llvm.genx.va.minmax
    1, // llvm.genx.va.minmax.filter
    2, // llvm.genx.vload
    2, // llvm.genx.vstore
    2, // llvm.genx.wait
    3, // llvm.genx.wrconstregion
    6, // llvm.genx.write.predef.reg
    3, // llvm.genx.wrpredpredregion
    3, // llvm.genx.wrpredregion
    3, // llvm.genx.wrregionf
    3, // llvm.genx.wrregioni
    2, // llvm.genx.yield
    2, // llvm.genx.zzzzend
  };

  unsigned AttrIdx = id - 1 - GenXIntrinsic::not_genx_intrinsic;
  #ifndef NDEBUG
  const size_t AttrMapNum = sizeof(IntrinsicsToAttributesMap)/sizeof(IntrinsicsToAttributesMap[0]);
  assert(AttrIdx < AttrMapNum && "invalid attribute index");
  #endif // NDEBUG
  AttributeList AS[1];
  unsigned NumAttrs = 0;
  if (id != 0) {
    switch(IntrinsicsToAttributesMap[AttrIdx]) {
    default: llvm_unreachable("Invalid attribute number");
    case 1: {
      const Attribute::AttrKind Atts[] = {Attribute::NoUnwind,Attribute::ReadOnly};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    case 2: {
      const Attribute::AttrKind Atts[] = {Attribute::NoUnwind};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    case 3: {
      const Attribute::AttrKind Atts[] = {Attribute::NoUnwind,Attribute::ReadNone};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    case 4: {
      const Attribute::AttrKind Atts[] = {Attribute::Convergent,Attribute::NoUnwind};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    case 5: {
      const Attribute::AttrKind Atts[] = {Attribute::NoUnwind,Attribute::WriteOnly};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    case 6: {
      const Attribute::AttrKind Atts[] = {Attribute::NoUnwind,Attribute::WriteOnly};
      AS[0] = AttributeList::get(C, AttributeList::FunctionIndex, Atts);
      NumAttrs = 1;
      break;
      }
    }
  }
  return AttributeList::get(C, makeArrayRef(AS, NumAttrs));
}
#endif // GET_INTRINSIC_ATTRIBUTES

#if defined(_MSC_VER) && defined(setjmp_undefined_for_msvc)
// let's return it to _setjmp state
#  pragma pop_macro("setjmp")
#  undef setjmp_undefined_for_msvc
#endif

