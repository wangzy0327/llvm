/*===---- complex - BANG wrapper for <new> ------------------------------===
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 *===-----------------------------------------------------------------------===
 */

#ifndef __CLANG_BANG_WRAPPERS_NEW
#define __CLANG_BANG_WRAPPERS_NEW

#include_next <new>

#include <bang_device_types.h>

// Device overrides for placement new and delete.
#pragma push_macro("BANG_NOEXCEPT")
#if __cplusplus >= 201103L
#define BANG_NOEXCEPT noexcept
#else
#define BANG_NOEXCEPT
#endif

__mlu_func__ __mlu_builtin__ void *operator new(__SIZE_TYPE__, void *__ptr) BANG_NOEXCEPT {
  return __ptr;
}
__mlu_func__ __mlu_builtin__ void *operator new[](__SIZE_TYPE__, void *__ptr) BANG_NOEXCEPT {
  return __ptr;
}
__mlu_func__ __mlu_builtin__ void operator delete(void *, void *) BANG_NOEXCEPT {}
__mlu_func__ __mlu_builtin__ void operator delete[](void *, void *) BANG_NOEXCEPT {}
#pragma pop_macro("BANG_NOEXCEPT")

#endif  // __CLANG_BANG_WRAPPERS_NEW
